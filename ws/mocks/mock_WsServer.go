// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	net "net"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	websocket "github.com/gorilla/websocket"

	ws "github.com/lorenzodonini/ocpp-go/ws"
)

// MockWsServer is an autogenerated mock type for the WsServer type
type MockWsServer struct {
	mock.Mock
}

type MockWsServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWsServer) EXPECT() *MockWsServer_Expecter {
	return &MockWsServer_Expecter{mock: &_m.Mock}
}

// AddSupportedSubprotocol provides a mock function with given fields: subProto
func (_m *MockWsServer) AddSupportedSubprotocol(subProto string) {
	_m.Called(subProto)
}

// MockWsServer_AddSupportedSubprotocol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSupportedSubprotocol'
type MockWsServer_AddSupportedSubprotocol_Call struct {
	*mock.Call
}

// AddSupportedSubprotocol is a helper method to define mock.On call
//   - subProto string
func (_e *MockWsServer_Expecter) AddSupportedSubprotocol(subProto interface{}) *MockWsServer_AddSupportedSubprotocol_Call {
	return &MockWsServer_AddSupportedSubprotocol_Call{Call: _e.mock.On("AddSupportedSubprotocol", subProto)}
}

func (_c *MockWsServer_AddSupportedSubprotocol_Call) Run(run func(subProto string)) *MockWsServer_AddSupportedSubprotocol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWsServer_AddSupportedSubprotocol_Call) Return() *MockWsServer_AddSupportedSubprotocol_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWsServer_AddSupportedSubprotocol_Call) RunAndReturn(run func(string)) *MockWsServer_AddSupportedSubprotocol_Call {
	_c.Run(run)
	return _c
}

// Addr provides a mock function with no fields
func (_m *MockWsServer) Addr() *net.TCPAddr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Addr")
	}

	var r0 *net.TCPAddr
	if rf, ok := ret.Get(0).(func() *net.TCPAddr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*net.TCPAddr)
		}
	}

	return r0
}

// MockWsServer_Addr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Addr'
type MockWsServer_Addr_Call struct {
	*mock.Call
}

// Addr is a helper method to define mock.On call
func (_e *MockWsServer_Expecter) Addr() *MockWsServer_Addr_Call {
	return &MockWsServer_Addr_Call{Call: _e.mock.On("Addr")}
}

func (_c *MockWsServer_Addr_Call) Run(run func()) *MockWsServer_Addr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWsServer_Addr_Call) Return(_a0 *net.TCPAddr) *MockWsServer_Addr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWsServer_Addr_Call) RunAndReturn(run func() *net.TCPAddr) *MockWsServer_Addr_Call {
	_c.Call.Return(run)
	return _c
}

// Connections provides a mock function with given fields: websocketId
func (_m *MockWsServer) Connections(websocketId string) *ws.WebSocket {
	ret := _m.Called(websocketId)

	if len(ret) == 0 {
		panic("no return value specified for Connections")
	}

	var r0 *ws.WebSocket
	if rf, ok := ret.Get(0).(func(string) *ws.WebSocket); ok {
		r0 = rf(websocketId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ws.WebSocket)
		}
	}

	return r0
}

// MockWsServer_Connections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connections'
type MockWsServer_Connections_Call struct {
	*mock.Call
}

// Connections is a helper method to define mock.On call
//   - websocketId string
func (_e *MockWsServer_Expecter) Connections(websocketId interface{}) *MockWsServer_Connections_Call {
	return &MockWsServer_Connections_Call{Call: _e.mock.On("Connections", websocketId)}
}

func (_c *MockWsServer_Connections_Call) Run(run func(websocketId string)) *MockWsServer_Connections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWsServer_Connections_Call) Return(_a0 *ws.WebSocket) *MockWsServer_Connections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWsServer_Connections_Call) RunAndReturn(run func(string) *ws.WebSocket) *MockWsServer_Connections_Call {
	_c.Call.Return(run)
	return _c
}

// Errors provides a mock function with no fields
func (_m *MockWsServer) Errors() <-chan error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Errors")
	}

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// MockWsServer_Errors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errors'
type MockWsServer_Errors_Call struct {
	*mock.Call
}

// Errors is a helper method to define mock.On call
func (_e *MockWsServer_Expecter) Errors() *MockWsServer_Errors_Call {
	return &MockWsServer_Errors_Call{Call: _e.mock.On("Errors")}
}

func (_c *MockWsServer_Errors_Call) Run(run func()) *MockWsServer_Errors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWsServer_Errors_Call) Return(_a0 <-chan error) *MockWsServer_Errors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWsServer_Errors_Call) RunAndReturn(run func() <-chan error) *MockWsServer_Errors_Call {
	_c.Call.Return(run)
	return _c
}

// SetBasicAuthHandler provides a mock function with given fields: handler
func (_m *MockWsServer) SetBasicAuthHandler(handler func(string, string) bool) {
	_m.Called(handler)
}

// MockWsServer_SetBasicAuthHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBasicAuthHandler'
type MockWsServer_SetBasicAuthHandler_Call struct {
	*mock.Call
}

// SetBasicAuthHandler is a helper method to define mock.On call
//   - handler func(string , string) bool
func (_e *MockWsServer_Expecter) SetBasicAuthHandler(handler interface{}) *MockWsServer_SetBasicAuthHandler_Call {
	return &MockWsServer_SetBasicAuthHandler_Call{Call: _e.mock.On("SetBasicAuthHandler", handler)}
}

func (_c *MockWsServer_SetBasicAuthHandler_Call) Run(run func(handler func(string, string) bool)) *MockWsServer_SetBasicAuthHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(string, string) bool))
	})
	return _c
}

func (_c *MockWsServer_SetBasicAuthHandler_Call) Return() *MockWsServer_SetBasicAuthHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWsServer_SetBasicAuthHandler_Call) RunAndReturn(run func(func(string, string) bool)) *MockWsServer_SetBasicAuthHandler_Call {
	_c.Run(run)
	return _c
}

// SetCheckClientHandler provides a mock function with given fields: handler
func (_m *MockWsServer) SetCheckClientHandler(handler func(string, *http.Request) bool) {
	_m.Called(handler)
}

// MockWsServer_SetCheckClientHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCheckClientHandler'
type MockWsServer_SetCheckClientHandler_Call struct {
	*mock.Call
}

// SetCheckClientHandler is a helper method to define mock.On call
//   - handler func(string , *http.Request) bool
func (_e *MockWsServer_Expecter) SetCheckClientHandler(handler interface{}) *MockWsServer_SetCheckClientHandler_Call {
	return &MockWsServer_SetCheckClientHandler_Call{Call: _e.mock.On("SetCheckClientHandler", handler)}
}

func (_c *MockWsServer_SetCheckClientHandler_Call) Run(run func(handler func(string, *http.Request) bool)) *MockWsServer_SetCheckClientHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(string, *http.Request) bool))
	})
	return _c
}

func (_c *MockWsServer_SetCheckClientHandler_Call) Return() *MockWsServer_SetCheckClientHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWsServer_SetCheckClientHandler_Call) RunAndReturn(run func(func(string, *http.Request) bool)) *MockWsServer_SetCheckClientHandler_Call {
	_c.Run(run)
	return _c
}

// SetCheckOriginHandler provides a mock function with given fields: handler
func (_m *MockWsServer) SetCheckOriginHandler(handler func(*http.Request) bool) {
	_m.Called(handler)
}

// MockWsServer_SetCheckOriginHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCheckOriginHandler'
type MockWsServer_SetCheckOriginHandler_Call struct {
	*mock.Call
}

// SetCheckOriginHandler is a helper method to define mock.On call
//   - handler func(*http.Request) bool
func (_e *MockWsServer_Expecter) SetCheckOriginHandler(handler interface{}) *MockWsServer_SetCheckOriginHandler_Call {
	return &MockWsServer_SetCheckOriginHandler_Call{Call: _e.mock.On("SetCheckOriginHandler", handler)}
}

func (_c *MockWsServer_SetCheckOriginHandler_Call) Run(run func(handler func(*http.Request) bool)) *MockWsServer_SetCheckOriginHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*http.Request) bool))
	})
	return _c
}

func (_c *MockWsServer_SetCheckOriginHandler_Call) Return() *MockWsServer_SetCheckOriginHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWsServer_SetCheckOriginHandler_Call) RunAndReturn(run func(func(*http.Request) bool)) *MockWsServer_SetCheckOriginHandler_Call {
	_c.Run(run)
	return _c
}

// SetDisconnectedClientHandler provides a mock function with given fields: handler
func (_m *MockWsServer) SetDisconnectedClientHandler(handler func(ws.Channel)) {
	_m.Called(handler)
}

// MockWsServer_SetDisconnectedClientHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDisconnectedClientHandler'
type MockWsServer_SetDisconnectedClientHandler_Call struct {
	*mock.Call
}

// SetDisconnectedClientHandler is a helper method to define mock.On call
//   - handler func(ws.Channel)
func (_e *MockWsServer_Expecter) SetDisconnectedClientHandler(handler interface{}) *MockWsServer_SetDisconnectedClientHandler_Call {
	return &MockWsServer_SetDisconnectedClientHandler_Call{Call: _e.mock.On("SetDisconnectedClientHandler", handler)}
}

func (_c *MockWsServer_SetDisconnectedClientHandler_Call) Run(run func(handler func(ws.Channel))) *MockWsServer_SetDisconnectedClientHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(ws.Channel)))
	})
	return _c
}

func (_c *MockWsServer_SetDisconnectedClientHandler_Call) Return() *MockWsServer_SetDisconnectedClientHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWsServer_SetDisconnectedClientHandler_Call) RunAndReturn(run func(func(ws.Channel))) *MockWsServer_SetDisconnectedClientHandler_Call {
	_c.Run(run)
	return _c
}

// SetMessageHandler provides a mock function with given fields: handler
func (_m *MockWsServer) SetMessageHandler(handler func(ws.Channel, []byte) error) {
	_m.Called(handler)
}

// MockWsServer_SetMessageHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMessageHandler'
type MockWsServer_SetMessageHandler_Call struct {
	*mock.Call
}

// SetMessageHandler is a helper method to define mock.On call
//   - handler func(ws.Channel , []byte) error
func (_e *MockWsServer_Expecter) SetMessageHandler(handler interface{}) *MockWsServer_SetMessageHandler_Call {
	return &MockWsServer_SetMessageHandler_Call{Call: _e.mock.On("SetMessageHandler", handler)}
}

func (_c *MockWsServer_SetMessageHandler_Call) Run(run func(handler func(ws.Channel, []byte) error)) *MockWsServer_SetMessageHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(ws.Channel, []byte) error))
	})
	return _c
}

func (_c *MockWsServer_SetMessageHandler_Call) Return() *MockWsServer_SetMessageHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWsServer_SetMessageHandler_Call) RunAndReturn(run func(func(ws.Channel, []byte) error)) *MockWsServer_SetMessageHandler_Call {
	_c.Run(run)
	return _c
}

// SetNewClientHandler provides a mock function with given fields: handler
func (_m *MockWsServer) SetNewClientHandler(handler func(ws.Channel)) {
	_m.Called(handler)
}

// MockWsServer_SetNewClientHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNewClientHandler'
type MockWsServer_SetNewClientHandler_Call struct {
	*mock.Call
}

// SetNewClientHandler is a helper method to define mock.On call
//   - handler func(ws.Channel)
func (_e *MockWsServer_Expecter) SetNewClientHandler(handler interface{}) *MockWsServer_SetNewClientHandler_Call {
	return &MockWsServer_SetNewClientHandler_Call{Call: _e.mock.On("SetNewClientHandler", handler)}
}

func (_c *MockWsServer_SetNewClientHandler_Call) Run(run func(handler func(ws.Channel))) *MockWsServer_SetNewClientHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(ws.Channel)))
	})
	return _c
}

func (_c *MockWsServer_SetNewClientHandler_Call) Return() *MockWsServer_SetNewClientHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWsServer_SetNewClientHandler_Call) RunAndReturn(run func(func(ws.Channel))) *MockWsServer_SetNewClientHandler_Call {
	_c.Run(run)
	return _c
}

// SetTimeoutConfig provides a mock function with given fields: config
func (_m *MockWsServer) SetTimeoutConfig(config ws.ServerTimeoutConfig) {
	_m.Called(config)
}

// MockWsServer_SetTimeoutConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTimeoutConfig'
type MockWsServer_SetTimeoutConfig_Call struct {
	*mock.Call
}

// SetTimeoutConfig is a helper method to define mock.On call
//   - config ws.ServerTimeoutConfig
func (_e *MockWsServer_Expecter) SetTimeoutConfig(config interface{}) *MockWsServer_SetTimeoutConfig_Call {
	return &MockWsServer_SetTimeoutConfig_Call{Call: _e.mock.On("SetTimeoutConfig", config)}
}

func (_c *MockWsServer_SetTimeoutConfig_Call) Run(run func(config ws.ServerTimeoutConfig)) *MockWsServer_SetTimeoutConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ws.ServerTimeoutConfig))
	})
	return _c
}

func (_c *MockWsServer_SetTimeoutConfig_Call) Return() *MockWsServer_SetTimeoutConfig_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWsServer_SetTimeoutConfig_Call) RunAndReturn(run func(ws.ServerTimeoutConfig)) *MockWsServer_SetTimeoutConfig_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with given fields: port, listenPath
func (_m *MockWsServer) Start(port int, listenPath string) {
	_m.Called(port, listenPath)
}

// MockWsServer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockWsServer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - port int
//   - listenPath string
func (_e *MockWsServer_Expecter) Start(port interface{}, listenPath interface{}) *MockWsServer_Start_Call {
	return &MockWsServer_Start_Call{Call: _e.mock.On("Start", port, listenPath)}
}

func (_c *MockWsServer_Start_Call) Run(run func(port int, listenPath string)) *MockWsServer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MockWsServer_Start_Call) Return() *MockWsServer_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWsServer_Start_Call) RunAndReturn(run func(int, string)) *MockWsServer_Start_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockWsServer) Stop() {
	_m.Called()
}

// MockWsServer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockWsServer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockWsServer_Expecter) Stop() *MockWsServer_Stop_Call {
	return &MockWsServer_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockWsServer_Stop_Call) Run(run func()) *MockWsServer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWsServer_Stop_Call) Return() *MockWsServer_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWsServer_Stop_Call) RunAndReturn(run func()) *MockWsServer_Stop_Call {
	_c.Run(run)
	return _c
}

// StopConnection provides a mock function with given fields: id, closeError
func (_m *MockWsServer) StopConnection(id string, closeError websocket.CloseError) error {
	ret := _m.Called(id, closeError)

	if len(ret) == 0 {
		panic("no return value specified for StopConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, websocket.CloseError) error); ok {
		r0 = rf(id, closeError)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWsServer_StopConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopConnection'
type MockWsServer_StopConnection_Call struct {
	*mock.Call
}

// StopConnection is a helper method to define mock.On call
//   - id string
//   - closeError websocket.CloseError
func (_e *MockWsServer_Expecter) StopConnection(id interface{}, closeError interface{}) *MockWsServer_StopConnection_Call {
	return &MockWsServer_StopConnection_Call{Call: _e.mock.On("StopConnection", id, closeError)}
}

func (_c *MockWsServer_StopConnection_Call) Run(run func(id string, closeError websocket.CloseError)) *MockWsServer_StopConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(websocket.CloseError))
	})
	return _c
}

func (_c *MockWsServer_StopConnection_Call) Return(_a0 error) *MockWsServer_StopConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWsServer_StopConnection_Call) RunAndReturn(run func(string, websocket.CloseError) error) *MockWsServer_StopConnection_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: webSocketId, data
func (_m *MockWsServer) Write(webSocketId string, data []byte) error {
	ret := _m.Called(webSocketId, data)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(webSocketId, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWsServer_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockWsServer_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - webSocketId string
//   - data []byte
func (_e *MockWsServer_Expecter) Write(webSocketId interface{}, data interface{}) *MockWsServer_Write_Call {
	return &MockWsServer_Write_Call{Call: _e.mock.On("Write", webSocketId, data)}
}

func (_c *MockWsServer_Write_Call) Run(run func(webSocketId string, data []byte)) *MockWsServer_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockWsServer_Write_Call) Return(_a0 error) *MockWsServer_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWsServer_Write_Call) RunAndReturn(run func(string, []byte) error) *MockWsServer_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWsServer creates a new instance of MockWsServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWsServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWsServer {
	mock := &MockWsServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
