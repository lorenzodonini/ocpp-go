// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockCheckClientHandler is an autogenerated mock type for the CheckClientHandler type
type MockCheckClientHandler struct {
	mock.Mock
}

type MockCheckClientHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCheckClientHandler) EXPECT() *MockCheckClientHandler_Expecter {
	return &MockCheckClientHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: id, r
func (_m *MockCheckClientHandler) Execute(id string, r *http.Request) bool {
	ret := _m.Called(id, r)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, *http.Request) bool); ok {
		r0 = rf(id, r)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCheckClientHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockCheckClientHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - id string
//   - r *http.Request
func (_e *MockCheckClientHandler_Expecter) Execute(id interface{}, r interface{}) *MockCheckClientHandler_Execute_Call {
	return &MockCheckClientHandler_Execute_Call{Call: _e.mock.On("Execute", id, r)}
}

func (_c *MockCheckClientHandler_Execute_Call) Run(run func(id string, r *http.Request)) *MockCheckClientHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockCheckClientHandler_Execute_Call) Return(_a0 bool) *MockCheckClientHandler_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCheckClientHandler_Execute_Call) RunAndReturn(run func(string, *http.Request) bool) *MockCheckClientHandler_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCheckClientHandler creates a new instance of MockCheckClientHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCheckClientHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCheckClientHandler {
	mock := &MockCheckClientHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
