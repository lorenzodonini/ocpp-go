// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockRequestQueue is an autogenerated mock type for the RequestQueue type
type MockRequestQueue struct {
	mock.Mock
}

type MockRequestQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestQueue) EXPECT() *MockRequestQueue_Expecter {
	return &MockRequestQueue_Expecter{mock: &_m.Mock}
}

// Init provides a mock function with no fields
func (_m *MockRequestQueue) Init() {
	_m.Called()
}

// MockRequestQueue_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockRequestQueue_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *MockRequestQueue_Expecter) Init() *MockRequestQueue_Init_Call {
	return &MockRequestQueue_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *MockRequestQueue_Init_Call) Run(run func()) *MockRequestQueue_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequestQueue_Init_Call) Return() *MockRequestQueue_Init_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRequestQueue_Init_Call) RunAndReturn(run func()) *MockRequestQueue_Init_Call {
	_c.Run(run)
	return _c
}

// IsEmpty provides a mock function with no fields
func (_m *MockRequestQueue) IsEmpty() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEmpty")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockRequestQueue_IsEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEmpty'
type MockRequestQueue_IsEmpty_Call struct {
	*mock.Call
}

// IsEmpty is a helper method to define mock.On call
func (_e *MockRequestQueue_Expecter) IsEmpty() *MockRequestQueue_IsEmpty_Call {
	return &MockRequestQueue_IsEmpty_Call{Call: _e.mock.On("IsEmpty")}
}

func (_c *MockRequestQueue_IsEmpty_Call) Run(run func()) *MockRequestQueue_IsEmpty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequestQueue_IsEmpty_Call) Return(_a0 bool) *MockRequestQueue_IsEmpty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequestQueue_IsEmpty_Call) RunAndReturn(run func() bool) *MockRequestQueue_IsEmpty_Call {
	_c.Call.Return(run)
	return _c
}

// IsFull provides a mock function with no fields
func (_m *MockRequestQueue) IsFull() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsFull")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockRequestQueue_IsFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFull'
type MockRequestQueue_IsFull_Call struct {
	*mock.Call
}

// IsFull is a helper method to define mock.On call
func (_e *MockRequestQueue_Expecter) IsFull() *MockRequestQueue_IsFull_Call {
	return &MockRequestQueue_IsFull_Call{Call: _e.mock.On("IsFull")}
}

func (_c *MockRequestQueue_IsFull_Call) Run(run func()) *MockRequestQueue_IsFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequestQueue_IsFull_Call) Return(_a0 bool) *MockRequestQueue_IsFull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequestQueue_IsFull_Call) RunAndReturn(run func() bool) *MockRequestQueue_IsFull_Call {
	_c.Call.Return(run)
	return _c
}

// Peek provides a mock function with no fields
func (_m *MockRequestQueue) Peek() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Peek")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockRequestQueue_Peek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Peek'
type MockRequestQueue_Peek_Call struct {
	*mock.Call
}

// Peek is a helper method to define mock.On call
func (_e *MockRequestQueue_Expecter) Peek() *MockRequestQueue_Peek_Call {
	return &MockRequestQueue_Peek_Call{Call: _e.mock.On("Peek")}
}

func (_c *MockRequestQueue_Peek_Call) Run(run func()) *MockRequestQueue_Peek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequestQueue_Peek_Call) Return(_a0 interface{}) *MockRequestQueue_Peek_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequestQueue_Peek_Call) RunAndReturn(run func() interface{}) *MockRequestQueue_Peek_Call {
	_c.Call.Return(run)
	return _c
}

// Pop provides a mock function with no fields
func (_m *MockRequestQueue) Pop() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pop")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockRequestQueue_Pop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pop'
type MockRequestQueue_Pop_Call struct {
	*mock.Call
}

// Pop is a helper method to define mock.On call
func (_e *MockRequestQueue_Expecter) Pop() *MockRequestQueue_Pop_Call {
	return &MockRequestQueue_Pop_Call{Call: _e.mock.On("Pop")}
}

func (_c *MockRequestQueue_Pop_Call) Run(run func()) *MockRequestQueue_Pop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequestQueue_Pop_Call) Return(_a0 interface{}) *MockRequestQueue_Pop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequestQueue_Pop_Call) RunAndReturn(run func() interface{}) *MockRequestQueue_Pop_Call {
	_c.Call.Return(run)
	return _c
}

// Push provides a mock function with given fields: element
func (_m *MockRequestQueue) Push(element interface{}) error {
	ret := _m.Called(element)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(element)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRequestQueue_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockRequestQueue_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - element interface{}
func (_e *MockRequestQueue_Expecter) Push(element interface{}) *MockRequestQueue_Push_Call {
	return &MockRequestQueue_Push_Call{Call: _e.mock.On("Push", element)}
}

func (_c *MockRequestQueue_Push_Call) Run(run func(element interface{})) *MockRequestQueue_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockRequestQueue_Push_Call) Return(_a0 error) *MockRequestQueue_Push_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequestQueue_Push_Call) RunAndReturn(run func(interface{}) error) *MockRequestQueue_Push_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockRequestQueue) Size() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockRequestQueue_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockRequestQueue_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockRequestQueue_Expecter) Size() *MockRequestQueue_Size_Call {
	return &MockRequestQueue_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockRequestQueue_Size_Call) Run(run func()) *MockRequestQueue_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequestQueue_Size_Call) Return(_a0 int) *MockRequestQueue_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequestQueue_Size_Call) RunAndReturn(run func() int) *MockRequestQueue_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequestQueue creates a new instance of MockRequestQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestQueue {
	mock := &MockRequestQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
