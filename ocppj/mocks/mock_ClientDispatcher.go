// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	ocpp "github.com/lorenzodonini/ocpp-go/ocpp"
	mock "github.com/stretchr/testify/mock"

	ocppj "github.com/lorenzodonini/ocpp-go/ocppj"

	time "time"

	ws "github.com/lorenzodonini/ocpp-go/ws"
)

// MockClientDispatcher is an autogenerated mock type for the ClientDispatcher type
type MockClientDispatcher struct {
	mock.Mock
}

type MockClientDispatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientDispatcher) EXPECT() *MockClientDispatcher_Expecter {
	return &MockClientDispatcher_Expecter{mock: &_m.Mock}
}

// CompleteRequest provides a mock function with given fields: requestID
func (_m *MockClientDispatcher) CompleteRequest(requestID string) {
	_m.Called(requestID)
}

// MockClientDispatcher_CompleteRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteRequest'
type MockClientDispatcher_CompleteRequest_Call struct {
	*mock.Call
}

// CompleteRequest is a helper method to define mock.On call
//   - requestID string
func (_e *MockClientDispatcher_Expecter) CompleteRequest(requestID interface{}) *MockClientDispatcher_CompleteRequest_Call {
	return &MockClientDispatcher_CompleteRequest_Call{Call: _e.mock.On("CompleteRequest", requestID)}
}

func (_c *MockClientDispatcher_CompleteRequest_Call) Run(run func(requestID string)) *MockClientDispatcher_CompleteRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClientDispatcher_CompleteRequest_Call) Return() *MockClientDispatcher_CompleteRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientDispatcher_CompleteRequest_Call) RunAndReturn(run func(string)) *MockClientDispatcher_CompleteRequest_Call {
	_c.Run(run)
	return _c
}

// IsPaused provides a mock function with no fields
func (_m *MockClientDispatcher) IsPaused() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsPaused")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClientDispatcher_IsPaused_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPaused'
type MockClientDispatcher_IsPaused_Call struct {
	*mock.Call
}

// IsPaused is a helper method to define mock.On call
func (_e *MockClientDispatcher_Expecter) IsPaused() *MockClientDispatcher_IsPaused_Call {
	return &MockClientDispatcher_IsPaused_Call{Call: _e.mock.On("IsPaused")}
}

func (_c *MockClientDispatcher_IsPaused_Call) Run(run func()) *MockClientDispatcher_IsPaused_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientDispatcher_IsPaused_Call) Return(_a0 bool) *MockClientDispatcher_IsPaused_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientDispatcher_IsPaused_Call) RunAndReturn(run func() bool) *MockClientDispatcher_IsPaused_Call {
	_c.Call.Return(run)
	return _c
}

// IsRunning provides a mock function with no fields
func (_m *MockClientDispatcher) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClientDispatcher_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type MockClientDispatcher_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *MockClientDispatcher_Expecter) IsRunning() *MockClientDispatcher_IsRunning_Call {
	return &MockClientDispatcher_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *MockClientDispatcher_IsRunning_Call) Run(run func()) *MockClientDispatcher_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientDispatcher_IsRunning_Call) Return(_a0 bool) *MockClientDispatcher_IsRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientDispatcher_IsRunning_Call) RunAndReturn(run func() bool) *MockClientDispatcher_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// Pause provides a mock function with no fields
func (_m *MockClientDispatcher) Pause() {
	_m.Called()
}

// MockClientDispatcher_Pause_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pause'
type MockClientDispatcher_Pause_Call struct {
	*mock.Call
}

// Pause is a helper method to define mock.On call
func (_e *MockClientDispatcher_Expecter) Pause() *MockClientDispatcher_Pause_Call {
	return &MockClientDispatcher_Pause_Call{Call: _e.mock.On("Pause")}
}

func (_c *MockClientDispatcher_Pause_Call) Run(run func()) *MockClientDispatcher_Pause_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientDispatcher_Pause_Call) Return() *MockClientDispatcher_Pause_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientDispatcher_Pause_Call) RunAndReturn(run func()) *MockClientDispatcher_Pause_Call {
	_c.Run(run)
	return _c
}

// Resume provides a mock function with no fields
func (_m *MockClientDispatcher) Resume() {
	_m.Called()
}

// MockClientDispatcher_Resume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resume'
type MockClientDispatcher_Resume_Call struct {
	*mock.Call
}

// Resume is a helper method to define mock.On call
func (_e *MockClientDispatcher_Expecter) Resume() *MockClientDispatcher_Resume_Call {
	return &MockClientDispatcher_Resume_Call{Call: _e.mock.On("Resume")}
}

func (_c *MockClientDispatcher_Resume_Call) Run(run func()) *MockClientDispatcher_Resume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientDispatcher_Resume_Call) Return() *MockClientDispatcher_Resume_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientDispatcher_Resume_Call) RunAndReturn(run func()) *MockClientDispatcher_Resume_Call {
	_c.Run(run)
	return _c
}

// SendRequest provides a mock function with given fields: req
func (_m *MockClientDispatcher) SendRequest(req ocppj.RequestBundle) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for SendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ocppj.RequestBundle) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientDispatcher_SendRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRequest'
type MockClientDispatcher_SendRequest_Call struct {
	*mock.Call
}

// SendRequest is a helper method to define mock.On call
//   - req ocppj.RequestBundle
func (_e *MockClientDispatcher_Expecter) SendRequest(req interface{}) *MockClientDispatcher_SendRequest_Call {
	return &MockClientDispatcher_SendRequest_Call{Call: _e.mock.On("SendRequest", req)}
}

func (_c *MockClientDispatcher_SendRequest_Call) Run(run func(req ocppj.RequestBundle)) *MockClientDispatcher_SendRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ocppj.RequestBundle))
	})
	return _c
}

func (_c *MockClientDispatcher_SendRequest_Call) Return(_a0 error) *MockClientDispatcher_SendRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientDispatcher_SendRequest_Call) RunAndReturn(run func(ocppj.RequestBundle) error) *MockClientDispatcher_SendRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SetNetworkClient provides a mock function with given fields: client
func (_m *MockClientDispatcher) SetNetworkClient(client ws.WsClient) {
	_m.Called(client)
}

// MockClientDispatcher_SetNetworkClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNetworkClient'
type MockClientDispatcher_SetNetworkClient_Call struct {
	*mock.Call
}

// SetNetworkClient is a helper method to define mock.On call
//   - client ws.WsClient
func (_e *MockClientDispatcher_Expecter) SetNetworkClient(client interface{}) *MockClientDispatcher_SetNetworkClient_Call {
	return &MockClientDispatcher_SetNetworkClient_Call{Call: _e.mock.On("SetNetworkClient", client)}
}

func (_c *MockClientDispatcher_SetNetworkClient_Call) Run(run func(client ws.WsClient)) *MockClientDispatcher_SetNetworkClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ws.WsClient))
	})
	return _c
}

func (_c *MockClientDispatcher_SetNetworkClient_Call) Return() *MockClientDispatcher_SetNetworkClient_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientDispatcher_SetNetworkClient_Call) RunAndReturn(run func(ws.WsClient)) *MockClientDispatcher_SetNetworkClient_Call {
	_c.Run(run)
	return _c
}

// SetOnRequestCanceled provides a mock function with given fields: cb
func (_m *MockClientDispatcher) SetOnRequestCanceled(cb func(string, ocpp.Request, *ocpp.Error)) {
	_m.Called(cb)
}

// MockClientDispatcher_SetOnRequestCanceled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOnRequestCanceled'
type MockClientDispatcher_SetOnRequestCanceled_Call struct {
	*mock.Call
}

// SetOnRequestCanceled is a helper method to define mock.On call
//   - cb func(string , ocpp.Request , *ocpp.Error)
func (_e *MockClientDispatcher_Expecter) SetOnRequestCanceled(cb interface{}) *MockClientDispatcher_SetOnRequestCanceled_Call {
	return &MockClientDispatcher_SetOnRequestCanceled_Call{Call: _e.mock.On("SetOnRequestCanceled", cb)}
}

func (_c *MockClientDispatcher_SetOnRequestCanceled_Call) Run(run func(cb func(string, ocpp.Request, *ocpp.Error))) *MockClientDispatcher_SetOnRequestCanceled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(string, ocpp.Request, *ocpp.Error)))
	})
	return _c
}

func (_c *MockClientDispatcher_SetOnRequestCanceled_Call) Return() *MockClientDispatcher_SetOnRequestCanceled_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientDispatcher_SetOnRequestCanceled_Call) RunAndReturn(run func(func(string, ocpp.Request, *ocpp.Error))) *MockClientDispatcher_SetOnRequestCanceled_Call {
	_c.Run(run)
	return _c
}

// SetPendingRequestState provides a mock function with given fields: stateHandler
func (_m *MockClientDispatcher) SetPendingRequestState(stateHandler ocppj.ClientState) {
	_m.Called(stateHandler)
}

// MockClientDispatcher_SetPendingRequestState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPendingRequestState'
type MockClientDispatcher_SetPendingRequestState_Call struct {
	*mock.Call
}

// SetPendingRequestState is a helper method to define mock.On call
//   - stateHandler ocppj.ClientState
func (_e *MockClientDispatcher_Expecter) SetPendingRequestState(stateHandler interface{}) *MockClientDispatcher_SetPendingRequestState_Call {
	return &MockClientDispatcher_SetPendingRequestState_Call{Call: _e.mock.On("SetPendingRequestState", stateHandler)}
}

func (_c *MockClientDispatcher_SetPendingRequestState_Call) Run(run func(stateHandler ocppj.ClientState)) *MockClientDispatcher_SetPendingRequestState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ocppj.ClientState))
	})
	return _c
}

func (_c *MockClientDispatcher_SetPendingRequestState_Call) Return() *MockClientDispatcher_SetPendingRequestState_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientDispatcher_SetPendingRequestState_Call) RunAndReturn(run func(ocppj.ClientState)) *MockClientDispatcher_SetPendingRequestState_Call {
	_c.Run(run)
	return _c
}

// SetTimeout provides a mock function with given fields: timeout
func (_m *MockClientDispatcher) SetTimeout(timeout time.Duration) {
	_m.Called(timeout)
}

// MockClientDispatcher_SetTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTimeout'
type MockClientDispatcher_SetTimeout_Call struct {
	*mock.Call
}

// SetTimeout is a helper method to define mock.On call
//   - timeout time.Duration
func (_e *MockClientDispatcher_Expecter) SetTimeout(timeout interface{}) *MockClientDispatcher_SetTimeout_Call {
	return &MockClientDispatcher_SetTimeout_Call{Call: _e.mock.On("SetTimeout", timeout)}
}

func (_c *MockClientDispatcher_SetTimeout_Call) Run(run func(timeout time.Duration)) *MockClientDispatcher_SetTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockClientDispatcher_SetTimeout_Call) Return() *MockClientDispatcher_SetTimeout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientDispatcher_SetTimeout_Call) RunAndReturn(run func(time.Duration)) *MockClientDispatcher_SetTimeout_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *MockClientDispatcher) Start() {
	_m.Called()
}

// MockClientDispatcher_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockClientDispatcher_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockClientDispatcher_Expecter) Start() *MockClientDispatcher_Start_Call {
	return &MockClientDispatcher_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockClientDispatcher_Start_Call) Run(run func()) *MockClientDispatcher_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientDispatcher_Start_Call) Return() *MockClientDispatcher_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientDispatcher_Start_Call) RunAndReturn(run func()) *MockClientDispatcher_Start_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockClientDispatcher) Stop() {
	_m.Called()
}

// MockClientDispatcher_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockClientDispatcher_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockClientDispatcher_Expecter) Stop() *MockClientDispatcher_Stop_Call {
	return &MockClientDispatcher_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockClientDispatcher_Stop_Call) Run(run func()) *MockClientDispatcher_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientDispatcher_Stop_Call) Return() *MockClientDispatcher_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientDispatcher_Stop_Call) RunAndReturn(run func()) *MockClientDispatcher_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockClientDispatcher creates a new instance of MockClientDispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientDispatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientDispatcher {
	mock := &MockClientDispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
