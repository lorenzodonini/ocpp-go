// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	ocpp "github.com/lorenzodonini/ocpp-go/ocpp"
	mock "github.com/stretchr/testify/mock"

	ocppj "github.com/lorenzodonini/ocpp-go/ocppj"
)

// MockServerState is an autogenerated mock type for the ServerState type
type MockServerState struct {
	mock.Mock
}

type MockServerState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerState) EXPECT() *MockServerState_Expecter {
	return &MockServerState_Expecter{mock: &_m.Mock}
}

// AddPendingRequest provides a mock function with given fields: clientID, requestID, req
func (_m *MockServerState) AddPendingRequest(clientID string, requestID string, req ocpp.Request) {
	_m.Called(clientID, requestID, req)
}

// MockServerState_AddPendingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPendingRequest'
type MockServerState_AddPendingRequest_Call struct {
	*mock.Call
}

// AddPendingRequest is a helper method to define mock.On call
//   - clientID string
//   - requestID string
//   - req ocpp.Request
func (_e *MockServerState_Expecter) AddPendingRequest(clientID interface{}, requestID interface{}, req interface{}) *MockServerState_AddPendingRequest_Call {
	return &MockServerState_AddPendingRequest_Call{Call: _e.mock.On("AddPendingRequest", clientID, requestID, req)}
}

func (_c *MockServerState_AddPendingRequest_Call) Run(run func(clientID string, requestID string, req ocpp.Request)) *MockServerState_AddPendingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(ocpp.Request))
	})
	return _c
}

func (_c *MockServerState_AddPendingRequest_Call) Return() *MockServerState_AddPendingRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerState_AddPendingRequest_Call) RunAndReturn(run func(string, string, ocpp.Request)) *MockServerState_AddPendingRequest_Call {
	_c.Run(run)
	return _c
}

// ClearAllPendingRequests provides a mock function with no fields
func (_m *MockServerState) ClearAllPendingRequests() {
	_m.Called()
}

// MockServerState_ClearAllPendingRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearAllPendingRequests'
type MockServerState_ClearAllPendingRequests_Call struct {
	*mock.Call
}

// ClearAllPendingRequests is a helper method to define mock.On call
func (_e *MockServerState_Expecter) ClearAllPendingRequests() *MockServerState_ClearAllPendingRequests_Call {
	return &MockServerState_ClearAllPendingRequests_Call{Call: _e.mock.On("ClearAllPendingRequests")}
}

func (_c *MockServerState_ClearAllPendingRequests_Call) Run(run func()) *MockServerState_ClearAllPendingRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerState_ClearAllPendingRequests_Call) Return() *MockServerState_ClearAllPendingRequests_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerState_ClearAllPendingRequests_Call) RunAndReturn(run func()) *MockServerState_ClearAllPendingRequests_Call {
	_c.Run(run)
	return _c
}

// ClearClientPendingRequest provides a mock function with given fields: clientID
func (_m *MockServerState) ClearClientPendingRequest(clientID string) {
	_m.Called(clientID)
}

// MockServerState_ClearClientPendingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearClientPendingRequest'
type MockServerState_ClearClientPendingRequest_Call struct {
	*mock.Call
}

// ClearClientPendingRequest is a helper method to define mock.On call
//   - clientID string
func (_e *MockServerState_Expecter) ClearClientPendingRequest(clientID interface{}) *MockServerState_ClearClientPendingRequest_Call {
	return &MockServerState_ClearClientPendingRequest_Call{Call: _e.mock.On("ClearClientPendingRequest", clientID)}
}

func (_c *MockServerState_ClearClientPendingRequest_Call) Run(run func(clientID string)) *MockServerState_ClearClientPendingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockServerState_ClearClientPendingRequest_Call) Return() *MockServerState_ClearClientPendingRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerState_ClearClientPendingRequest_Call) RunAndReturn(run func(string)) *MockServerState_ClearClientPendingRequest_Call {
	_c.Run(run)
	return _c
}

// DeletePendingRequest provides a mock function with given fields: clientID, requestID
func (_m *MockServerState) DeletePendingRequest(clientID string, requestID string) {
	_m.Called(clientID, requestID)
}

// MockServerState_DeletePendingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePendingRequest'
type MockServerState_DeletePendingRequest_Call struct {
	*mock.Call
}

// DeletePendingRequest is a helper method to define mock.On call
//   - clientID string
//   - requestID string
func (_e *MockServerState_Expecter) DeletePendingRequest(clientID interface{}, requestID interface{}) *MockServerState_DeletePendingRequest_Call {
	return &MockServerState_DeletePendingRequest_Call{Call: _e.mock.On("DeletePendingRequest", clientID, requestID)}
}

func (_c *MockServerState_DeletePendingRequest_Call) Run(run func(clientID string, requestID string)) *MockServerState_DeletePendingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockServerState_DeletePendingRequest_Call) Return() *MockServerState_DeletePendingRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerState_DeletePendingRequest_Call) RunAndReturn(run func(string, string)) *MockServerState_DeletePendingRequest_Call {
	_c.Run(run)
	return _c
}

// GetClientState provides a mock function with given fields: clientID
func (_m *MockServerState) GetClientState(clientID string) ocppj.ClientState {
	ret := _m.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetClientState")
	}

	var r0 ocppj.ClientState
	if rf, ok := ret.Get(0).(func(string) ocppj.ClientState); ok {
		r0 = rf(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ocppj.ClientState)
		}
	}

	return r0
}

// MockServerState_GetClientState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientState'
type MockServerState_GetClientState_Call struct {
	*mock.Call
}

// GetClientState is a helper method to define mock.On call
//   - clientID string
func (_e *MockServerState_Expecter) GetClientState(clientID interface{}) *MockServerState_GetClientState_Call {
	return &MockServerState_GetClientState_Call{Call: _e.mock.On("GetClientState", clientID)}
}

func (_c *MockServerState_GetClientState_Call) Run(run func(clientID string)) *MockServerState_GetClientState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockServerState_GetClientState_Call) Return(_a0 ocppj.ClientState) *MockServerState_GetClientState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerState_GetClientState_Call) RunAndReturn(run func(string) ocppj.ClientState) *MockServerState_GetClientState_Call {
	_c.Call.Return(run)
	return _c
}

// HasPendingRequest provides a mock function with given fields: clientID
func (_m *MockServerState) HasPendingRequest(clientID string) bool {
	ret := _m.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for HasPendingRequest")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(clientID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockServerState_HasPendingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasPendingRequest'
type MockServerState_HasPendingRequest_Call struct {
	*mock.Call
}

// HasPendingRequest is a helper method to define mock.On call
//   - clientID string
func (_e *MockServerState_Expecter) HasPendingRequest(clientID interface{}) *MockServerState_HasPendingRequest_Call {
	return &MockServerState_HasPendingRequest_Call{Call: _e.mock.On("HasPendingRequest", clientID)}
}

func (_c *MockServerState_HasPendingRequest_Call) Run(run func(clientID string)) *MockServerState_HasPendingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockServerState_HasPendingRequest_Call) Return(_a0 bool) *MockServerState_HasPendingRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerState_HasPendingRequest_Call) RunAndReturn(run func(string) bool) *MockServerState_HasPendingRequest_Call {
	_c.Call.Return(run)
	return _c
}

// HasPendingRequests provides a mock function with no fields
func (_m *MockServerState) HasPendingRequests() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasPendingRequests")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockServerState_HasPendingRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasPendingRequests'
type MockServerState_HasPendingRequests_Call struct {
	*mock.Call
}

// HasPendingRequests is a helper method to define mock.On call
func (_e *MockServerState_Expecter) HasPendingRequests() *MockServerState_HasPendingRequests_Call {
	return &MockServerState_HasPendingRequests_Call{Call: _e.mock.On("HasPendingRequests")}
}

func (_c *MockServerState_HasPendingRequests_Call) Run(run func()) *MockServerState_HasPendingRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerState_HasPendingRequests_Call) Return(_a0 bool) *MockServerState_HasPendingRequests_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerState_HasPendingRequests_Call) RunAndReturn(run func() bool) *MockServerState_HasPendingRequests_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServerState creates a new instance of MockServerState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerState {
	mock := &MockServerState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
