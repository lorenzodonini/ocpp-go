// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	ocpp "github.com/lorenzodonini/ocpp-go/ocpp"
	mock "github.com/stretchr/testify/mock"

	ws "github.com/lorenzodonini/ocpp-go/ws"
)

// MockRequestHandler is an autogenerated mock type for the RequestHandler type
type MockRequestHandler struct {
	mock.Mock
}

type MockRequestHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestHandler) EXPECT() *MockRequestHandler_Expecter {
	return &MockRequestHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: client, request, requestId, action
func (_m *MockRequestHandler) Execute(client ws.Channel, request ocpp.Request, requestId string, action string) {
	_m.Called(client, request, requestId, action)
}

// MockRequestHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockRequestHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - client ws.Channel
//   - request ocpp.Request
//   - requestId string
//   - action string
func (_e *MockRequestHandler_Expecter) Execute(client interface{}, request interface{}, requestId interface{}, action interface{}) *MockRequestHandler_Execute_Call {
	return &MockRequestHandler_Execute_Call{Call: _e.mock.On("Execute", client, request, requestId, action)}
}

func (_c *MockRequestHandler_Execute_Call) Run(run func(client ws.Channel, request ocpp.Request, requestId string, action string)) *MockRequestHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ws.Channel), args[1].(ocpp.Request), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockRequestHandler_Execute_Call) Return() *MockRequestHandler_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRequestHandler_Execute_Call) RunAndReturn(run func(ws.Channel, ocpp.Request, string, string)) *MockRequestHandler_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockRequestHandler creates a new instance of MockRequestHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestHandler {
	mock := &MockRequestHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
