// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	ocpp "github.com/lorenzodonini/ocpp-go/ocpp"
	mock "github.com/stretchr/testify/mock"

	ws "github.com/lorenzodonini/ocpp-go/ws"
)

// MockErrorHandler is an autogenerated mock type for the ErrorHandler type
type MockErrorHandler struct {
	mock.Mock
}

type MockErrorHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockErrorHandler) EXPECT() *MockErrorHandler_Expecter {
	return &MockErrorHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: client, err, details
func (_m *MockErrorHandler) Execute(client ws.Channel, err *ocpp.Error, details interface{}) {
	_m.Called(client, err, details)
}

// MockErrorHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockErrorHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - client ws.Channel
//   - err *ocpp.Error
//   - details interface{}
func (_e *MockErrorHandler_Expecter) Execute(client interface{}, err interface{}, details interface{}) *MockErrorHandler_Execute_Call {
	return &MockErrorHandler_Execute_Call{Call: _e.mock.On("Execute", client, err, details)}
}

func (_c *MockErrorHandler_Execute_Call) Run(run func(client ws.Channel, err *ocpp.Error, details interface{})) *MockErrorHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ws.Channel), args[1].(*ocpp.Error), args[2].(interface{}))
	})
	return _c
}

func (_c *MockErrorHandler_Execute_Call) Return() *MockErrorHandler_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockErrorHandler_Execute_Call) RunAndReturn(run func(ws.Channel, *ocpp.Error, interface{})) *MockErrorHandler_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockErrorHandler creates a new instance of MockErrorHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrorHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrorHandler {
	mock := &MockErrorHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
