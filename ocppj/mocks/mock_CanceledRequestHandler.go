// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	ocpp "github.com/lorenzodonini/ocpp-go/ocpp"
	mock "github.com/stretchr/testify/mock"
)

// MockCanceledRequestHandler is an autogenerated mock type for the CanceledRequestHandler type
type MockCanceledRequestHandler struct {
	mock.Mock
}

type MockCanceledRequestHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCanceledRequestHandler) EXPECT() *MockCanceledRequestHandler_Expecter {
	return &MockCanceledRequestHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: clientID, requestID, request, err
func (_m *MockCanceledRequestHandler) Execute(clientID string, requestID string, request ocpp.Request, err *ocpp.Error) {
	_m.Called(clientID, requestID, request, err)
}

// MockCanceledRequestHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockCanceledRequestHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - clientID string
//   - requestID string
//   - request ocpp.Request
//   - err *ocpp.Error
func (_e *MockCanceledRequestHandler_Expecter) Execute(clientID interface{}, requestID interface{}, request interface{}, err interface{}) *MockCanceledRequestHandler_Execute_Call {
	return &MockCanceledRequestHandler_Execute_Call{Call: _e.mock.On("Execute", clientID, requestID, request, err)}
}

func (_c *MockCanceledRequestHandler_Execute_Call) Run(run func(clientID string, requestID string, request ocpp.Request, err *ocpp.Error)) *MockCanceledRequestHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(ocpp.Request), args[3].(*ocpp.Error))
	})
	return _c
}

func (_c *MockCanceledRequestHandler_Execute_Call) Return() *MockCanceledRequestHandler_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCanceledRequestHandler_Execute_Call) RunAndReturn(run func(string, string, ocpp.Request, *ocpp.Error)) *MockCanceledRequestHandler_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockCanceledRequestHandler creates a new instance of MockCanceledRequestHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCanceledRequestHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCanceledRequestHandler {
	mock := &MockCanceledRequestHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
