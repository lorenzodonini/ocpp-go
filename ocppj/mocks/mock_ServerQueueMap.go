// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	ocppj "github.com/lorenzodonini/ocpp-go/ocppj"
	mock "github.com/stretchr/testify/mock"
)

// MockServerQueueMap is an autogenerated mock type for the ServerQueueMap type
type MockServerQueueMap struct {
	mock.Mock
}

type MockServerQueueMap_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerQueueMap) EXPECT() *MockServerQueueMap_Expecter {
	return &MockServerQueueMap_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: clientID, queue
func (_m *MockServerQueueMap) Add(clientID string, queue ocppj.RequestQueue) {
	_m.Called(clientID, queue)
}

// MockServerQueueMap_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockServerQueueMap_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - clientID string
//   - queue ocppj.RequestQueue
func (_e *MockServerQueueMap_Expecter) Add(clientID interface{}, queue interface{}) *MockServerQueueMap_Add_Call {
	return &MockServerQueueMap_Add_Call{Call: _e.mock.On("Add", clientID, queue)}
}

func (_c *MockServerQueueMap_Add_Call) Run(run func(clientID string, queue ocppj.RequestQueue)) *MockServerQueueMap_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(ocppj.RequestQueue))
	})
	return _c
}

func (_c *MockServerQueueMap_Add_Call) Return() *MockServerQueueMap_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerQueueMap_Add_Call) RunAndReturn(run func(string, ocppj.RequestQueue)) *MockServerQueueMap_Add_Call {
	_c.Run(run)
	return _c
}

// Get provides a mock function with given fields: clientID
func (_m *MockServerQueueMap) Get(clientID string) (ocppj.RequestQueue, bool) {
	ret := _m.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 ocppj.RequestQueue
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (ocppj.RequestQueue, bool)); ok {
		return rf(clientID)
	}
	if rf, ok := ret.Get(0).(func(string) ocppj.RequestQueue); ok {
		r0 = rf(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ocppj.RequestQueue)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(clientID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockServerQueueMap_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockServerQueueMap_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - clientID string
func (_e *MockServerQueueMap_Expecter) Get(clientID interface{}) *MockServerQueueMap_Get_Call {
	return &MockServerQueueMap_Get_Call{Call: _e.mock.On("Get", clientID)}
}

func (_c *MockServerQueueMap_Get_Call) Run(run func(clientID string)) *MockServerQueueMap_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockServerQueueMap_Get_Call) Return(_a0 ocppj.RequestQueue, _a1 bool) *MockServerQueueMap_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServerQueueMap_Get_Call) RunAndReturn(run func(string) (ocppj.RequestQueue, bool)) *MockServerQueueMap_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreate provides a mock function with given fields: clientID
func (_m *MockServerQueueMap) GetOrCreate(clientID string) ocppj.RequestQueue {
	ret := _m.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreate")
	}

	var r0 ocppj.RequestQueue
	if rf, ok := ret.Get(0).(func(string) ocppj.RequestQueue); ok {
		r0 = rf(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ocppj.RequestQueue)
		}
	}

	return r0
}

// MockServerQueueMap_GetOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreate'
type MockServerQueueMap_GetOrCreate_Call struct {
	*mock.Call
}

// GetOrCreate is a helper method to define mock.On call
//   - clientID string
func (_e *MockServerQueueMap_Expecter) GetOrCreate(clientID interface{}) *MockServerQueueMap_GetOrCreate_Call {
	return &MockServerQueueMap_GetOrCreate_Call{Call: _e.mock.On("GetOrCreate", clientID)}
}

func (_c *MockServerQueueMap_GetOrCreate_Call) Run(run func(clientID string)) *MockServerQueueMap_GetOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockServerQueueMap_GetOrCreate_Call) Return(_a0 ocppj.RequestQueue) *MockServerQueueMap_GetOrCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerQueueMap_GetOrCreate_Call) RunAndReturn(run func(string) ocppj.RequestQueue) *MockServerQueueMap_GetOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with no fields
func (_m *MockServerQueueMap) Init() {
	_m.Called()
}

// MockServerQueueMap_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockServerQueueMap_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *MockServerQueueMap_Expecter) Init() *MockServerQueueMap_Init_Call {
	return &MockServerQueueMap_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *MockServerQueueMap_Init_Call) Run(run func()) *MockServerQueueMap_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerQueueMap_Init_Call) Return() *MockServerQueueMap_Init_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerQueueMap_Init_Call) RunAndReturn(run func()) *MockServerQueueMap_Init_Call {
	_c.Run(run)
	return _c
}

// Remove provides a mock function with given fields: clientID
func (_m *MockServerQueueMap) Remove(clientID string) {
	_m.Called(clientID)
}

// MockServerQueueMap_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockServerQueueMap_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - clientID string
func (_e *MockServerQueueMap_Expecter) Remove(clientID interface{}) *MockServerQueueMap_Remove_Call {
	return &MockServerQueueMap_Remove_Call{Call: _e.mock.On("Remove", clientID)}
}

func (_c *MockServerQueueMap_Remove_Call) Run(run func(clientID string)) *MockServerQueueMap_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockServerQueueMap_Remove_Call) Return() *MockServerQueueMap_Remove_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerQueueMap_Remove_Call) RunAndReturn(run func(string)) *MockServerQueueMap_Remove_Call {
	_c.Run(run)
	return _c
}

// NewMockServerQueueMap creates a new instance of MockServerQueueMap. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerQueueMap(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerQueueMap {
	mock := &MockServerQueueMap{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
