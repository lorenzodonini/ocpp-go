// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	ocppj "github.com/lorenzodonini/ocpp-go/ocppj"
	mock "github.com/stretchr/testify/mock"
)

// MockMessage is an autogenerated mock type for the Message type
type MockMessage struct {
	mock.Mock
}

type MockMessage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessage) EXPECT() *MockMessage_Expecter {
	return &MockMessage_Expecter{mock: &_m.Mock}
}

// GetMessageTypeId provides a mock function with no fields
func (_m *MockMessage) GetMessageTypeId() ocppj.MessageType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMessageTypeId")
	}

	var r0 ocppj.MessageType
	if rf, ok := ret.Get(0).(func() ocppj.MessageType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ocppj.MessageType)
	}

	return r0
}

// MockMessage_GetMessageTypeId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageTypeId'
type MockMessage_GetMessageTypeId_Call struct {
	*mock.Call
}

// GetMessageTypeId is a helper method to define mock.On call
func (_e *MockMessage_Expecter) GetMessageTypeId() *MockMessage_GetMessageTypeId_Call {
	return &MockMessage_GetMessageTypeId_Call{Call: _e.mock.On("GetMessageTypeId")}
}

func (_c *MockMessage_GetMessageTypeId_Call) Run(run func()) *MockMessage_GetMessageTypeId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessage_GetMessageTypeId_Call) Return(_a0 ocppj.MessageType) *MockMessage_GetMessageTypeId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessage_GetMessageTypeId_Call) RunAndReturn(run func() ocppj.MessageType) *MockMessage_GetMessageTypeId_Call {
	_c.Call.Return(run)
	return _c
}

// GetUniqueId provides a mock function with no fields
func (_m *MockMessage) GetUniqueId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUniqueId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMessage_GetUniqueId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUniqueId'
type MockMessage_GetUniqueId_Call struct {
	*mock.Call
}

// GetUniqueId is a helper method to define mock.On call
func (_e *MockMessage_Expecter) GetUniqueId() *MockMessage_GetUniqueId_Call {
	return &MockMessage_GetUniqueId_Call{Call: _e.mock.On("GetUniqueId")}
}

func (_c *MockMessage_GetUniqueId_Call) Run(run func()) *MockMessage_GetUniqueId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessage_GetUniqueId_Call) Return(_a0 string) *MockMessage_GetUniqueId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessage_GetUniqueId_Call) RunAndReturn(run func() string) *MockMessage_GetUniqueId_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalJSON provides a mock function with no fields
func (_m *MockMessage) MarshalJSON() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalJSON")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessage_MarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalJSON'
type MockMessage_MarshalJSON_Call struct {
	*mock.Call
}

// MarshalJSON is a helper method to define mock.On call
func (_e *MockMessage_Expecter) MarshalJSON() *MockMessage_MarshalJSON_Call {
	return &MockMessage_MarshalJSON_Call{Call: _e.mock.On("MarshalJSON")}
}

func (_c *MockMessage_MarshalJSON_Call) Run(run func()) *MockMessage_MarshalJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessage_MarshalJSON_Call) Return(_a0 []byte, _a1 error) *MockMessage_MarshalJSON_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessage_MarshalJSON_Call) RunAndReturn(run func() ([]byte, error)) *MockMessage_MarshalJSON_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessage creates a new instance of MockMessage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessage {
	mock := &MockMessage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
