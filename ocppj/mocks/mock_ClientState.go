// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	ocpp "github.com/lorenzodonini/ocpp-go/ocpp"
	mock "github.com/stretchr/testify/mock"
)

// MockClientState is an autogenerated mock type for the ClientState type
type MockClientState struct {
	mock.Mock
}

type MockClientState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientState) EXPECT() *MockClientState_Expecter {
	return &MockClientState_Expecter{mock: &_m.Mock}
}

// AddPendingRequest provides a mock function with given fields: requestID, req
func (_m *MockClientState) AddPendingRequest(requestID string, req ocpp.Request) {
	_m.Called(requestID, req)
}

// MockClientState_AddPendingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPendingRequest'
type MockClientState_AddPendingRequest_Call struct {
	*mock.Call
}

// AddPendingRequest is a helper method to define mock.On call
//   - requestID string
//   - req ocpp.Request
func (_e *MockClientState_Expecter) AddPendingRequest(requestID interface{}, req interface{}) *MockClientState_AddPendingRequest_Call {
	return &MockClientState_AddPendingRequest_Call{Call: _e.mock.On("AddPendingRequest", requestID, req)}
}

func (_c *MockClientState_AddPendingRequest_Call) Run(run func(requestID string, req ocpp.Request)) *MockClientState_AddPendingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(ocpp.Request))
	})
	return _c
}

func (_c *MockClientState_AddPendingRequest_Call) Return() *MockClientState_AddPendingRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientState_AddPendingRequest_Call) RunAndReturn(run func(string, ocpp.Request)) *MockClientState_AddPendingRequest_Call {
	_c.Run(run)
	return _c
}

// ClearPendingRequests provides a mock function with no fields
func (_m *MockClientState) ClearPendingRequests() {
	_m.Called()
}

// MockClientState_ClearPendingRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearPendingRequests'
type MockClientState_ClearPendingRequests_Call struct {
	*mock.Call
}

// ClearPendingRequests is a helper method to define mock.On call
func (_e *MockClientState_Expecter) ClearPendingRequests() *MockClientState_ClearPendingRequests_Call {
	return &MockClientState_ClearPendingRequests_Call{Call: _e.mock.On("ClearPendingRequests")}
}

func (_c *MockClientState_ClearPendingRequests_Call) Run(run func()) *MockClientState_ClearPendingRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientState_ClearPendingRequests_Call) Return() *MockClientState_ClearPendingRequests_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientState_ClearPendingRequests_Call) RunAndReturn(run func()) *MockClientState_ClearPendingRequests_Call {
	_c.Run(run)
	return _c
}

// DeletePendingRequest provides a mock function with given fields: requestID
func (_m *MockClientState) DeletePendingRequest(requestID string) {
	_m.Called(requestID)
}

// MockClientState_DeletePendingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePendingRequest'
type MockClientState_DeletePendingRequest_Call struct {
	*mock.Call
}

// DeletePendingRequest is a helper method to define mock.On call
//   - requestID string
func (_e *MockClientState_Expecter) DeletePendingRequest(requestID interface{}) *MockClientState_DeletePendingRequest_Call {
	return &MockClientState_DeletePendingRequest_Call{Call: _e.mock.On("DeletePendingRequest", requestID)}
}

func (_c *MockClientState_DeletePendingRequest_Call) Run(run func(requestID string)) *MockClientState_DeletePendingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClientState_DeletePendingRequest_Call) Return() *MockClientState_DeletePendingRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientState_DeletePendingRequest_Call) RunAndReturn(run func(string)) *MockClientState_DeletePendingRequest_Call {
	_c.Run(run)
	return _c
}

// GetPendingRequest provides a mock function with given fields: requestID
func (_m *MockClientState) GetPendingRequest(requestID string) (ocpp.Request, bool) {
	ret := _m.Called(requestID)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingRequest")
	}

	var r0 ocpp.Request
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (ocpp.Request, bool)); ok {
		return rf(requestID)
	}
	if rf, ok := ret.Get(0).(func(string) ocpp.Request); ok {
		r0 = rf(requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ocpp.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(requestID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockClientState_GetPendingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingRequest'
type MockClientState_GetPendingRequest_Call struct {
	*mock.Call
}

// GetPendingRequest is a helper method to define mock.On call
//   - requestID string
func (_e *MockClientState_Expecter) GetPendingRequest(requestID interface{}) *MockClientState_GetPendingRequest_Call {
	return &MockClientState_GetPendingRequest_Call{Call: _e.mock.On("GetPendingRequest", requestID)}
}

func (_c *MockClientState_GetPendingRequest_Call) Run(run func(requestID string)) *MockClientState_GetPendingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClientState_GetPendingRequest_Call) Return(_a0 ocpp.Request, _a1 bool) *MockClientState_GetPendingRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientState_GetPendingRequest_Call) RunAndReturn(run func(string) (ocpp.Request, bool)) *MockClientState_GetPendingRequest_Call {
	_c.Call.Return(run)
	return _c
}

// HasPendingRequest provides a mock function with no fields
func (_m *MockClientState) HasPendingRequest() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasPendingRequest")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClientState_HasPendingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasPendingRequest'
type MockClientState_HasPendingRequest_Call struct {
	*mock.Call
}

// HasPendingRequest is a helper method to define mock.On call
func (_e *MockClientState_Expecter) HasPendingRequest() *MockClientState_HasPendingRequest_Call {
	return &MockClientState_HasPendingRequest_Call{Call: _e.mock.On("HasPendingRequest")}
}

func (_c *MockClientState_HasPendingRequest_Call) Run(run func()) *MockClientState_HasPendingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientState_HasPendingRequest_Call) Return(_a0 bool) *MockClientState_HasPendingRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientState_HasPendingRequest_Call) RunAndReturn(run func() bool) *MockClientState_HasPendingRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientState creates a new instance of MockClientState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientState {
	mock := &MockClientState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
