// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	ocppj "github.com/lorenzodonini/ocpp-go/ocppj"
	mock "github.com/stretchr/testify/mock"

	time "time"

	ws "github.com/lorenzodonini/ocpp-go/ws"
)

// MockServerDispatcher is an autogenerated mock type for the ServerDispatcher type
type MockServerDispatcher struct {
	mock.Mock
}

type MockServerDispatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerDispatcher) EXPECT() *MockServerDispatcher_Expecter {
	return &MockServerDispatcher_Expecter{mock: &_m.Mock}
}

// CompleteRequest provides a mock function with given fields: clientID, requestID
func (_m *MockServerDispatcher) CompleteRequest(clientID string, requestID string) {
	_m.Called(clientID, requestID)
}

// MockServerDispatcher_CompleteRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteRequest'
type MockServerDispatcher_CompleteRequest_Call struct {
	*mock.Call
}

// CompleteRequest is a helper method to define mock.On call
//   - clientID string
//   - requestID string
func (_e *MockServerDispatcher_Expecter) CompleteRequest(clientID interface{}, requestID interface{}) *MockServerDispatcher_CompleteRequest_Call {
	return &MockServerDispatcher_CompleteRequest_Call{Call: _e.mock.On("CompleteRequest", clientID, requestID)}
}

func (_c *MockServerDispatcher_CompleteRequest_Call) Run(run func(clientID string, requestID string)) *MockServerDispatcher_CompleteRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockServerDispatcher_CompleteRequest_Call) Return() *MockServerDispatcher_CompleteRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerDispatcher_CompleteRequest_Call) RunAndReturn(run func(string, string)) *MockServerDispatcher_CompleteRequest_Call {
	_c.Run(run)
	return _c
}

// CreateClient provides a mock function with given fields: clientID
func (_m *MockServerDispatcher) CreateClient(clientID string) {
	_m.Called(clientID)
}

// MockServerDispatcher_CreateClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClient'
type MockServerDispatcher_CreateClient_Call struct {
	*mock.Call
}

// CreateClient is a helper method to define mock.On call
//   - clientID string
func (_e *MockServerDispatcher_Expecter) CreateClient(clientID interface{}) *MockServerDispatcher_CreateClient_Call {
	return &MockServerDispatcher_CreateClient_Call{Call: _e.mock.On("CreateClient", clientID)}
}

func (_c *MockServerDispatcher_CreateClient_Call) Run(run func(clientID string)) *MockServerDispatcher_CreateClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockServerDispatcher_CreateClient_Call) Return() *MockServerDispatcher_CreateClient_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerDispatcher_CreateClient_Call) RunAndReturn(run func(string)) *MockServerDispatcher_CreateClient_Call {
	_c.Run(run)
	return _c
}

// DeleteClient provides a mock function with given fields: clientID
func (_m *MockServerDispatcher) DeleteClient(clientID string) {
	_m.Called(clientID)
}

// MockServerDispatcher_DeleteClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClient'
type MockServerDispatcher_DeleteClient_Call struct {
	*mock.Call
}

// DeleteClient is a helper method to define mock.On call
//   - clientID string
func (_e *MockServerDispatcher_Expecter) DeleteClient(clientID interface{}) *MockServerDispatcher_DeleteClient_Call {
	return &MockServerDispatcher_DeleteClient_Call{Call: _e.mock.On("DeleteClient", clientID)}
}

func (_c *MockServerDispatcher_DeleteClient_Call) Run(run func(clientID string)) *MockServerDispatcher_DeleteClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockServerDispatcher_DeleteClient_Call) Return() *MockServerDispatcher_DeleteClient_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerDispatcher_DeleteClient_Call) RunAndReturn(run func(string)) *MockServerDispatcher_DeleteClient_Call {
	_c.Run(run)
	return _c
}

// IsRunning provides a mock function with no fields
func (_m *MockServerDispatcher) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockServerDispatcher_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type MockServerDispatcher_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *MockServerDispatcher_Expecter) IsRunning() *MockServerDispatcher_IsRunning_Call {
	return &MockServerDispatcher_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *MockServerDispatcher_IsRunning_Call) Run(run func()) *MockServerDispatcher_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerDispatcher_IsRunning_Call) Return(_a0 bool) *MockServerDispatcher_IsRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerDispatcher_IsRunning_Call) RunAndReturn(run func() bool) *MockServerDispatcher_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// SendRequest provides a mock function with given fields: clientID, req
func (_m *MockServerDispatcher) SendRequest(clientID string, req ocppj.RequestBundle) error {
	ret := _m.Called(clientID, req)

	if len(ret) == 0 {
		panic("no return value specified for SendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ocppj.RequestBundle) error); ok {
		r0 = rf(clientID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServerDispatcher_SendRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRequest'
type MockServerDispatcher_SendRequest_Call struct {
	*mock.Call
}

// SendRequest is a helper method to define mock.On call
//   - clientID string
//   - req ocppj.RequestBundle
func (_e *MockServerDispatcher_Expecter) SendRequest(clientID interface{}, req interface{}) *MockServerDispatcher_SendRequest_Call {
	return &MockServerDispatcher_SendRequest_Call{Call: _e.mock.On("SendRequest", clientID, req)}
}

func (_c *MockServerDispatcher_SendRequest_Call) Run(run func(clientID string, req ocppj.RequestBundle)) *MockServerDispatcher_SendRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(ocppj.RequestBundle))
	})
	return _c
}

func (_c *MockServerDispatcher_SendRequest_Call) Return(_a0 error) *MockServerDispatcher_SendRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerDispatcher_SendRequest_Call) RunAndReturn(run func(string, ocppj.RequestBundle) error) *MockServerDispatcher_SendRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SetNetworkServer provides a mock function with given fields: server
func (_m *MockServerDispatcher) SetNetworkServer(server ws.WsServer) {
	_m.Called(server)
}

// MockServerDispatcher_SetNetworkServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNetworkServer'
type MockServerDispatcher_SetNetworkServer_Call struct {
	*mock.Call
}

// SetNetworkServer is a helper method to define mock.On call
//   - server ws.WsServer
func (_e *MockServerDispatcher_Expecter) SetNetworkServer(server interface{}) *MockServerDispatcher_SetNetworkServer_Call {
	return &MockServerDispatcher_SetNetworkServer_Call{Call: _e.mock.On("SetNetworkServer", server)}
}

func (_c *MockServerDispatcher_SetNetworkServer_Call) Run(run func(server ws.WsServer)) *MockServerDispatcher_SetNetworkServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ws.WsServer))
	})
	return _c
}

func (_c *MockServerDispatcher_SetNetworkServer_Call) Return() *MockServerDispatcher_SetNetworkServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerDispatcher_SetNetworkServer_Call) RunAndReturn(run func(ws.WsServer)) *MockServerDispatcher_SetNetworkServer_Call {
	_c.Run(run)
	return _c
}

// SetOnRequestCanceled provides a mock function with given fields: cb
func (_m *MockServerDispatcher) SetOnRequestCanceled(cb ocppj.CanceledRequestHandler) {
	_m.Called(cb)
}

// MockServerDispatcher_SetOnRequestCanceled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOnRequestCanceled'
type MockServerDispatcher_SetOnRequestCanceled_Call struct {
	*mock.Call
}

// SetOnRequestCanceled is a helper method to define mock.On call
//   - cb ocppj.CanceledRequestHandler
func (_e *MockServerDispatcher_Expecter) SetOnRequestCanceled(cb interface{}) *MockServerDispatcher_SetOnRequestCanceled_Call {
	return &MockServerDispatcher_SetOnRequestCanceled_Call{Call: _e.mock.On("SetOnRequestCanceled", cb)}
}

func (_c *MockServerDispatcher_SetOnRequestCanceled_Call) Run(run func(cb ocppj.CanceledRequestHandler)) *MockServerDispatcher_SetOnRequestCanceled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ocppj.CanceledRequestHandler))
	})
	return _c
}

func (_c *MockServerDispatcher_SetOnRequestCanceled_Call) Return() *MockServerDispatcher_SetOnRequestCanceled_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerDispatcher_SetOnRequestCanceled_Call) RunAndReturn(run func(ocppj.CanceledRequestHandler)) *MockServerDispatcher_SetOnRequestCanceled_Call {
	_c.Run(run)
	return _c
}

// SetPendingRequestState provides a mock function with given fields: stateHandler
func (_m *MockServerDispatcher) SetPendingRequestState(stateHandler ocppj.ServerState) {
	_m.Called(stateHandler)
}

// MockServerDispatcher_SetPendingRequestState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPendingRequestState'
type MockServerDispatcher_SetPendingRequestState_Call struct {
	*mock.Call
}

// SetPendingRequestState is a helper method to define mock.On call
//   - stateHandler ocppj.ServerState
func (_e *MockServerDispatcher_Expecter) SetPendingRequestState(stateHandler interface{}) *MockServerDispatcher_SetPendingRequestState_Call {
	return &MockServerDispatcher_SetPendingRequestState_Call{Call: _e.mock.On("SetPendingRequestState", stateHandler)}
}

func (_c *MockServerDispatcher_SetPendingRequestState_Call) Run(run func(stateHandler ocppj.ServerState)) *MockServerDispatcher_SetPendingRequestState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ocppj.ServerState))
	})
	return _c
}

func (_c *MockServerDispatcher_SetPendingRequestState_Call) Return() *MockServerDispatcher_SetPendingRequestState_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerDispatcher_SetPendingRequestState_Call) RunAndReturn(run func(ocppj.ServerState)) *MockServerDispatcher_SetPendingRequestState_Call {
	_c.Run(run)
	return _c
}

// SetTimeout provides a mock function with given fields: timeout
func (_m *MockServerDispatcher) SetTimeout(timeout time.Duration) {
	_m.Called(timeout)
}

// MockServerDispatcher_SetTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTimeout'
type MockServerDispatcher_SetTimeout_Call struct {
	*mock.Call
}

// SetTimeout is a helper method to define mock.On call
//   - timeout time.Duration
func (_e *MockServerDispatcher_Expecter) SetTimeout(timeout interface{}) *MockServerDispatcher_SetTimeout_Call {
	return &MockServerDispatcher_SetTimeout_Call{Call: _e.mock.On("SetTimeout", timeout)}
}

func (_c *MockServerDispatcher_SetTimeout_Call) Run(run func(timeout time.Duration)) *MockServerDispatcher_SetTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockServerDispatcher_SetTimeout_Call) Return() *MockServerDispatcher_SetTimeout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerDispatcher_SetTimeout_Call) RunAndReturn(run func(time.Duration)) *MockServerDispatcher_SetTimeout_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *MockServerDispatcher) Start() {
	_m.Called()
}

// MockServerDispatcher_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockServerDispatcher_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockServerDispatcher_Expecter) Start() *MockServerDispatcher_Start_Call {
	return &MockServerDispatcher_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockServerDispatcher_Start_Call) Run(run func()) *MockServerDispatcher_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerDispatcher_Start_Call) Return() *MockServerDispatcher_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerDispatcher_Start_Call) RunAndReturn(run func()) *MockServerDispatcher_Start_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockServerDispatcher) Stop() {
	_m.Called()
}

// MockServerDispatcher_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockServerDispatcher_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockServerDispatcher_Expecter) Stop() *MockServerDispatcher_Stop_Call {
	return &MockServerDispatcher_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockServerDispatcher_Stop_Call) Run(run func()) *MockServerDispatcher_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerDispatcher_Stop_Call) Return() *MockServerDispatcher_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerDispatcher_Stop_Call) RunAndReturn(run func()) *MockServerDispatcher_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockServerDispatcher creates a new instance of MockServerDispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerDispatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerDispatcher {
	mock := &MockServerDispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
