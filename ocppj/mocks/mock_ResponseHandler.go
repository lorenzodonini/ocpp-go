// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	ocpp "github.com/lorenzodonini/ocpp-go/ocpp"
	mock "github.com/stretchr/testify/mock"

	ws "github.com/lorenzodonini/ocpp-go/ws"
)

// MockResponseHandler is an autogenerated mock type for the ResponseHandler type
type MockResponseHandler struct {
	mock.Mock
}

type MockResponseHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResponseHandler) EXPECT() *MockResponseHandler_Expecter {
	return &MockResponseHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: client, response, requestId
func (_m *MockResponseHandler) Execute(client ws.Channel, response ocpp.Response, requestId string) {
	_m.Called(client, response, requestId)
}

// MockResponseHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockResponseHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - client ws.Channel
//   - response ocpp.Response
//   - requestId string
func (_e *MockResponseHandler_Expecter) Execute(client interface{}, response interface{}, requestId interface{}) *MockResponseHandler_Execute_Call {
	return &MockResponseHandler_Execute_Call{Call: _e.mock.On("Execute", client, response, requestId)}
}

func (_c *MockResponseHandler_Execute_Call) Run(run func(client ws.Channel, response ocpp.Response, requestId string)) *MockResponseHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ws.Channel), args[1].(ocpp.Response), args[2].(string))
	})
	return _c
}

func (_c *MockResponseHandler_Execute_Call) Return() *MockResponseHandler_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResponseHandler_Execute_Call) RunAndReturn(run func(ws.Channel, ocpp.Response, string)) *MockResponseHandler_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockResponseHandler creates a new instance of MockResponseHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResponseHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResponseHandler {
	mock := &MockResponseHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
