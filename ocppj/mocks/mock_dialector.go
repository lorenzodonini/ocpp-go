// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	ocpp "github.com/lorenzodonini/ocpp-go/ocpp"
	mock "github.com/stretchr/testify/mock"
)

// Mockdialector is an autogenerated mock type for the dialector type
type Mockdialector struct {
	mock.Mock
}

type Mockdialector_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockdialector) EXPECT() *Mockdialector_Expecter {
	return &Mockdialector_Expecter{mock: &_m.Mock}
}

// Dialect provides a mock function with no fields
func (_m *Mockdialector) Dialect() ocpp.Dialect {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dialect")
	}

	var r0 ocpp.Dialect
	if rf, ok := ret.Get(0).(func() ocpp.Dialect); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ocpp.Dialect)
	}

	return r0
}

// Mockdialector_Dialect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dialect'
type Mockdialector_Dialect_Call struct {
	*mock.Call
}

// Dialect is a helper method to define mock.On call
func (_e *Mockdialector_Expecter) Dialect() *Mockdialector_Dialect_Call {
	return &Mockdialector_Dialect_Call{Call: _e.mock.On("Dialect")}
}

func (_c *Mockdialector_Dialect_Call) Run(run func()) *Mockdialector_Dialect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mockdialector_Dialect_Call) Return(_a0 ocpp.Dialect) *Mockdialector_Dialect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockdialector_Dialect_Call) RunAndReturn(run func() ocpp.Dialect) *Mockdialector_Dialect_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdialector creates a new instance of Mockdialector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdialector(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockdialector {
	mock := &Mockdialector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
