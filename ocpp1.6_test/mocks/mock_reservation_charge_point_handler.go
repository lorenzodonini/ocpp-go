// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	reservation "github.com/lorenzodonini/ocpp-go/ocpp1.6/reservation"
	mock "github.com/stretchr/testify/mock"
)

// MockReservationChargePointHandler is an autogenerated mock type for the ChargePointHandler type
type MockReservationChargePointHandler struct {
	mock.Mock
}

type MockReservationChargePointHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReservationChargePointHandler) EXPECT() *MockReservationChargePointHandler_Expecter {
	return &MockReservationChargePointHandler_Expecter{mock: &_m.Mock}
}

// OnCancelReservation provides a mock function with given fields: request
func (_m *MockReservationChargePointHandler) OnCancelReservation(request *reservation.CancelReservationRequest) (*reservation.CancelReservationConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnCancelReservation")
	}

	var r0 *reservation.CancelReservationConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*reservation.CancelReservationRequest) (*reservation.CancelReservationConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*reservation.CancelReservationRequest) *reservation.CancelReservationConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reservation.CancelReservationConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*reservation.CancelReservationRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReservationChargePointHandler_OnCancelReservation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnCancelReservation'
type MockReservationChargePointHandler_OnCancelReservation_Call struct {
	*mock.Call
}

// OnCancelReservation is a helper method to define mock.On call
//   - request *reservation.CancelReservationRequest
func (_e *MockReservationChargePointHandler_Expecter) OnCancelReservation(request interface{}) *MockReservationChargePointHandler_OnCancelReservation_Call {
	return &MockReservationChargePointHandler_OnCancelReservation_Call{Call: _e.mock.On("OnCancelReservation", request)}
}

func (_c *MockReservationChargePointHandler_OnCancelReservation_Call) Run(run func(request *reservation.CancelReservationRequest)) *MockReservationChargePointHandler_OnCancelReservation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*reservation.CancelReservationRequest))
	})
	return _c
}

func (_c *MockReservationChargePointHandler_OnCancelReservation_Call) Return(confirmation *reservation.CancelReservationConfirmation, err error) *MockReservationChargePointHandler_OnCancelReservation_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockReservationChargePointHandler_OnCancelReservation_Call) RunAndReturn(run func(*reservation.CancelReservationRequest) (*reservation.CancelReservationConfirmation, error)) *MockReservationChargePointHandler_OnCancelReservation_Call {
	_c.Call.Return(run)
	return _c
}

// OnReserveNow provides a mock function with given fields: request
func (_m *MockReservationChargePointHandler) OnReserveNow(request *reservation.ReserveNowRequest) (*reservation.ReserveNowConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnReserveNow")
	}

	var r0 *reservation.ReserveNowConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*reservation.ReserveNowRequest) (*reservation.ReserveNowConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*reservation.ReserveNowRequest) *reservation.ReserveNowConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reservation.ReserveNowConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*reservation.ReserveNowRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReservationChargePointHandler_OnReserveNow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnReserveNow'
type MockReservationChargePointHandler_OnReserveNow_Call struct {
	*mock.Call
}

// OnReserveNow is a helper method to define mock.On call
//   - request *reservation.ReserveNowRequest
func (_e *MockReservationChargePointHandler_Expecter) OnReserveNow(request interface{}) *MockReservationChargePointHandler_OnReserveNow_Call {
	return &MockReservationChargePointHandler_OnReserveNow_Call{Call: _e.mock.On("OnReserveNow", request)}
}

func (_c *MockReservationChargePointHandler_OnReserveNow_Call) Run(run func(request *reservation.ReserveNowRequest)) *MockReservationChargePointHandler_OnReserveNow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*reservation.ReserveNowRequest))
	})
	return _c
}

func (_c *MockReservationChargePointHandler_OnReserveNow_Call) Return(confirmation *reservation.ReserveNowConfirmation, err error) *MockReservationChargePointHandler_OnReserveNow_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockReservationChargePointHandler_OnReserveNow_Call) RunAndReturn(run func(*reservation.ReserveNowRequest) (*reservation.ReserveNowConfirmation, error)) *MockReservationChargePointHandler_OnReserveNow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReservationChargePointHandler creates a new instance of MockReservationChargePointHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReservationChargePointHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReservationChargePointHandler {
	mock := &MockReservationChargePointHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
