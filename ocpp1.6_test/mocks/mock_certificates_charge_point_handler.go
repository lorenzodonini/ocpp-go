// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	certificates "github.com/lorenzodonini/ocpp-go/ocpp1.6/certificates"
	mock "github.com/stretchr/testify/mock"
)

// MockCertificatesChargePointHandler is an autogenerated mock type for the ChargePointHandler type
type MockCertificatesChargePointHandler struct {
	mock.Mock
}

type MockCertificatesChargePointHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCertificatesChargePointHandler) EXPECT() *MockCertificatesChargePointHandler_Expecter {
	return &MockCertificatesChargePointHandler_Expecter{mock: &_m.Mock}
}

// OnDeleteCertificate provides a mock function with given fields: request
func (_m *MockCertificatesChargePointHandler) OnDeleteCertificate(request *certificates.DeleteCertificateRequest) (*certificates.DeleteCertificateResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnDeleteCertificate")
	}

	var r0 *certificates.DeleteCertificateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*certificates.DeleteCertificateRequest) (*certificates.DeleteCertificateResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*certificates.DeleteCertificateRequest) *certificates.DeleteCertificateResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*certificates.DeleteCertificateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*certificates.DeleteCertificateRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCertificatesChargePointHandler_OnDeleteCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDeleteCertificate'
type MockCertificatesChargePointHandler_OnDeleteCertificate_Call struct {
	*mock.Call
}

// OnDeleteCertificate is a helper method to define mock.On call
//   - request *certificates.DeleteCertificateRequest
func (_e *MockCertificatesChargePointHandler_Expecter) OnDeleteCertificate(request interface{}) *MockCertificatesChargePointHandler_OnDeleteCertificate_Call {
	return &MockCertificatesChargePointHandler_OnDeleteCertificate_Call{Call: _e.mock.On("OnDeleteCertificate", request)}
}

func (_c *MockCertificatesChargePointHandler_OnDeleteCertificate_Call) Run(run func(request *certificates.DeleteCertificateRequest)) *MockCertificatesChargePointHandler_OnDeleteCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*certificates.DeleteCertificateRequest))
	})
	return _c
}

func (_c *MockCertificatesChargePointHandler_OnDeleteCertificate_Call) Return(response *certificates.DeleteCertificateResponse, err error) *MockCertificatesChargePointHandler_OnDeleteCertificate_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockCertificatesChargePointHandler_OnDeleteCertificate_Call) RunAndReturn(run func(*certificates.DeleteCertificateRequest) (*certificates.DeleteCertificateResponse, error)) *MockCertificatesChargePointHandler_OnDeleteCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// OnGetInstalledCertificateIds provides a mock function with given fields: request
func (_m *MockCertificatesChargePointHandler) OnGetInstalledCertificateIds(request *certificates.GetInstalledCertificateIdsRequest) (*certificates.GetInstalledCertificateIdsResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnGetInstalledCertificateIds")
	}

	var r0 *certificates.GetInstalledCertificateIdsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*certificates.GetInstalledCertificateIdsRequest) (*certificates.GetInstalledCertificateIdsResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*certificates.GetInstalledCertificateIdsRequest) *certificates.GetInstalledCertificateIdsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*certificates.GetInstalledCertificateIdsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*certificates.GetInstalledCertificateIdsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCertificatesChargePointHandler_OnGetInstalledCertificateIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnGetInstalledCertificateIds'
type MockCertificatesChargePointHandler_OnGetInstalledCertificateIds_Call struct {
	*mock.Call
}

// OnGetInstalledCertificateIds is a helper method to define mock.On call
//   - request *certificates.GetInstalledCertificateIdsRequest
func (_e *MockCertificatesChargePointHandler_Expecter) OnGetInstalledCertificateIds(request interface{}) *MockCertificatesChargePointHandler_OnGetInstalledCertificateIds_Call {
	return &MockCertificatesChargePointHandler_OnGetInstalledCertificateIds_Call{Call: _e.mock.On("OnGetInstalledCertificateIds", request)}
}

func (_c *MockCertificatesChargePointHandler_OnGetInstalledCertificateIds_Call) Run(run func(request *certificates.GetInstalledCertificateIdsRequest)) *MockCertificatesChargePointHandler_OnGetInstalledCertificateIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*certificates.GetInstalledCertificateIdsRequest))
	})
	return _c
}

func (_c *MockCertificatesChargePointHandler_OnGetInstalledCertificateIds_Call) Return(response *certificates.GetInstalledCertificateIdsResponse, err error) *MockCertificatesChargePointHandler_OnGetInstalledCertificateIds_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockCertificatesChargePointHandler_OnGetInstalledCertificateIds_Call) RunAndReturn(run func(*certificates.GetInstalledCertificateIdsRequest) (*certificates.GetInstalledCertificateIdsResponse, error)) *MockCertificatesChargePointHandler_OnGetInstalledCertificateIds_Call {
	_c.Call.Return(run)
	return _c
}

// OnInstallCertificate provides a mock function with given fields: request
func (_m *MockCertificatesChargePointHandler) OnInstallCertificate(request *certificates.InstallCertificateRequest) (*certificates.InstallCertificateResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnInstallCertificate")
	}

	var r0 *certificates.InstallCertificateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*certificates.InstallCertificateRequest) (*certificates.InstallCertificateResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*certificates.InstallCertificateRequest) *certificates.InstallCertificateResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*certificates.InstallCertificateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*certificates.InstallCertificateRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCertificatesChargePointHandler_OnInstallCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnInstallCertificate'
type MockCertificatesChargePointHandler_OnInstallCertificate_Call struct {
	*mock.Call
}

// OnInstallCertificate is a helper method to define mock.On call
//   - request *certificates.InstallCertificateRequest
func (_e *MockCertificatesChargePointHandler_Expecter) OnInstallCertificate(request interface{}) *MockCertificatesChargePointHandler_OnInstallCertificate_Call {
	return &MockCertificatesChargePointHandler_OnInstallCertificate_Call{Call: _e.mock.On("OnInstallCertificate", request)}
}

func (_c *MockCertificatesChargePointHandler_OnInstallCertificate_Call) Run(run func(request *certificates.InstallCertificateRequest)) *MockCertificatesChargePointHandler_OnInstallCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*certificates.InstallCertificateRequest))
	})
	return _c
}

func (_c *MockCertificatesChargePointHandler_OnInstallCertificate_Call) Return(response *certificates.InstallCertificateResponse, err error) *MockCertificatesChargePointHandler_OnInstallCertificate_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockCertificatesChargePointHandler_OnInstallCertificate_Call) RunAndReturn(run func(*certificates.InstallCertificateRequest) (*certificates.InstallCertificateResponse, error)) *MockCertificatesChargePointHandler_OnInstallCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCertificatesChargePointHandler creates a new instance of MockCertificatesChargePointHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCertificatesChargePointHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCertificatesChargePointHandler {
	mock := &MockCertificatesChargePointHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
