// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	extendedtriggermessage "github.com/lorenzodonini/ocpp-go/ocpp1.6/extendedtriggermessage"
	mock "github.com/stretchr/testify/mock"
)

// MockExtendedTriggerMessageChargePointHandler is an autogenerated mock type for the ChargePointHandler type
type MockExtendedTriggerMessageChargePointHandler struct {
	mock.Mock
}

type MockExtendedTriggerMessageChargePointHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExtendedTriggerMessageChargePointHandler) EXPECT() *MockExtendedTriggerMessageChargePointHandler_Expecter {
	return &MockExtendedTriggerMessageChargePointHandler_Expecter{mock: &_m.Mock}
}

// OnExtendedTriggerMessage provides a mock function with given fields: request
func (_m *MockExtendedTriggerMessageChargePointHandler) OnExtendedTriggerMessage(request *extendedtriggermessage.ExtendedTriggerMessageRequest) (*extendedtriggermessage.ExtendedTriggerMessageResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnExtendedTriggerMessage")
	}

	var r0 *extendedtriggermessage.ExtendedTriggerMessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*extendedtriggermessage.ExtendedTriggerMessageRequest) (*extendedtriggermessage.ExtendedTriggerMessageResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*extendedtriggermessage.ExtendedTriggerMessageRequest) *extendedtriggermessage.ExtendedTriggerMessageResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*extendedtriggermessage.ExtendedTriggerMessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*extendedtriggermessage.ExtendedTriggerMessageRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExtendedTriggerMessageChargePointHandler_OnExtendedTriggerMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnExtendedTriggerMessage'
type MockExtendedTriggerMessageChargePointHandler_OnExtendedTriggerMessage_Call struct {
	*mock.Call
}

// OnExtendedTriggerMessage is a helper method to define mock.On call
//   - request *extendedtriggermessage.ExtendedTriggerMessageRequest
func (_e *MockExtendedTriggerMessageChargePointHandler_Expecter) OnExtendedTriggerMessage(request interface{}) *MockExtendedTriggerMessageChargePointHandler_OnExtendedTriggerMessage_Call {
	return &MockExtendedTriggerMessageChargePointHandler_OnExtendedTriggerMessage_Call{Call: _e.mock.On("OnExtendedTriggerMessage", request)}
}

func (_c *MockExtendedTriggerMessageChargePointHandler_OnExtendedTriggerMessage_Call) Run(run func(request *extendedtriggermessage.ExtendedTriggerMessageRequest)) *MockExtendedTriggerMessageChargePointHandler_OnExtendedTriggerMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*extendedtriggermessage.ExtendedTriggerMessageRequest))
	})
	return _c
}

func (_c *MockExtendedTriggerMessageChargePointHandler_OnExtendedTriggerMessage_Call) Return(response *extendedtriggermessage.ExtendedTriggerMessageResponse, err error) *MockExtendedTriggerMessageChargePointHandler_OnExtendedTriggerMessage_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockExtendedTriggerMessageChargePointHandler_OnExtendedTriggerMessage_Call) RunAndReturn(run func(*extendedtriggermessage.ExtendedTriggerMessageRequest) (*extendedtriggermessage.ExtendedTriggerMessageResponse, error)) *MockExtendedTriggerMessageChargePointHandler_OnExtendedTriggerMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExtendedTriggerMessageChargePointHandler creates a new instance of MockExtendedTriggerMessageChargePointHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExtendedTriggerMessageChargePointHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExtendedTriggerMessageChargePointHandler {
	mock := &MockExtendedTriggerMessageChargePointHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
