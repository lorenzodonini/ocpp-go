// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	firmware "github.com/lorenzodonini/ocpp-go/ocpp1.6/firmware"
	mock "github.com/stretchr/testify/mock"
)

// MockFirmwareChargePointHandler is an autogenerated mock type for the ChargePointHandler type
type MockFirmwareChargePointHandler struct {
	mock.Mock
}

type MockFirmwareChargePointHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFirmwareChargePointHandler) EXPECT() *MockFirmwareChargePointHandler_Expecter {
	return &MockFirmwareChargePointHandler_Expecter{mock: &_m.Mock}
}

// OnGetDiagnostics provides a mock function with given fields: request
func (_m *MockFirmwareChargePointHandler) OnGetDiagnostics(request *firmware.GetDiagnosticsRequest) (*firmware.GetDiagnosticsConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnGetDiagnostics")
	}

	var r0 *firmware.GetDiagnosticsConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*firmware.GetDiagnosticsRequest) (*firmware.GetDiagnosticsConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*firmware.GetDiagnosticsRequest) *firmware.GetDiagnosticsConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firmware.GetDiagnosticsConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*firmware.GetDiagnosticsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFirmwareChargePointHandler_OnGetDiagnostics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnGetDiagnostics'
type MockFirmwareChargePointHandler_OnGetDiagnostics_Call struct {
	*mock.Call
}

// OnGetDiagnostics is a helper method to define mock.On call
//   - request *firmware.GetDiagnosticsRequest
func (_e *MockFirmwareChargePointHandler_Expecter) OnGetDiagnostics(request interface{}) *MockFirmwareChargePointHandler_OnGetDiagnostics_Call {
	return &MockFirmwareChargePointHandler_OnGetDiagnostics_Call{Call: _e.mock.On("OnGetDiagnostics", request)}
}

func (_c *MockFirmwareChargePointHandler_OnGetDiagnostics_Call) Run(run func(request *firmware.GetDiagnosticsRequest)) *MockFirmwareChargePointHandler_OnGetDiagnostics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*firmware.GetDiagnosticsRequest))
	})
	return _c
}

func (_c *MockFirmwareChargePointHandler_OnGetDiagnostics_Call) Return(confirmation *firmware.GetDiagnosticsConfirmation, err error) *MockFirmwareChargePointHandler_OnGetDiagnostics_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockFirmwareChargePointHandler_OnGetDiagnostics_Call) RunAndReturn(run func(*firmware.GetDiagnosticsRequest) (*firmware.GetDiagnosticsConfirmation, error)) *MockFirmwareChargePointHandler_OnGetDiagnostics_Call {
	_c.Call.Return(run)
	return _c
}

// OnUpdateFirmware provides a mock function with given fields: request
func (_m *MockFirmwareChargePointHandler) OnUpdateFirmware(request *firmware.UpdateFirmwareRequest) (*firmware.UpdateFirmwareConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnUpdateFirmware")
	}

	var r0 *firmware.UpdateFirmwareConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*firmware.UpdateFirmwareRequest) (*firmware.UpdateFirmwareConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*firmware.UpdateFirmwareRequest) *firmware.UpdateFirmwareConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firmware.UpdateFirmwareConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*firmware.UpdateFirmwareRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFirmwareChargePointHandler_OnUpdateFirmware_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnUpdateFirmware'
type MockFirmwareChargePointHandler_OnUpdateFirmware_Call struct {
	*mock.Call
}

// OnUpdateFirmware is a helper method to define mock.On call
//   - request *firmware.UpdateFirmwareRequest
func (_e *MockFirmwareChargePointHandler_Expecter) OnUpdateFirmware(request interface{}) *MockFirmwareChargePointHandler_OnUpdateFirmware_Call {
	return &MockFirmwareChargePointHandler_OnUpdateFirmware_Call{Call: _e.mock.On("OnUpdateFirmware", request)}
}

func (_c *MockFirmwareChargePointHandler_OnUpdateFirmware_Call) Run(run func(request *firmware.UpdateFirmwareRequest)) *MockFirmwareChargePointHandler_OnUpdateFirmware_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*firmware.UpdateFirmwareRequest))
	})
	return _c
}

func (_c *MockFirmwareChargePointHandler_OnUpdateFirmware_Call) Return(confirmation *firmware.UpdateFirmwareConfirmation, err error) *MockFirmwareChargePointHandler_OnUpdateFirmware_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockFirmwareChargePointHandler_OnUpdateFirmware_Call) RunAndReturn(run func(*firmware.UpdateFirmwareRequest) (*firmware.UpdateFirmwareConfirmation, error)) *MockFirmwareChargePointHandler_OnUpdateFirmware_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFirmwareChargePointHandler creates a new instance of MockFirmwareChargePointHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFirmwareChargePointHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFirmwareChargePointHandler {
	mock := &MockFirmwareChargePointHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
