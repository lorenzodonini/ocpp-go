// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	remotetrigger "github.com/lorenzodonini/ocpp-go/ocpp1.6/remotetrigger"
	mock "github.com/stretchr/testify/mock"
)

// MockRemoteTriggerChargePointHandler is an autogenerated mock type for the ChargePointHandler type
type MockRemoteTriggerChargePointHandler struct {
	mock.Mock
}

type MockRemoteTriggerChargePointHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemoteTriggerChargePointHandler) EXPECT() *MockRemoteTriggerChargePointHandler_Expecter {
	return &MockRemoteTriggerChargePointHandler_Expecter{mock: &_m.Mock}
}

// OnTriggerMessage provides a mock function with given fields: request
func (_m *MockRemoteTriggerChargePointHandler) OnTriggerMessage(request *remotetrigger.TriggerMessageRequest) (*remotetrigger.TriggerMessageConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnTriggerMessage")
	}

	var r0 *remotetrigger.TriggerMessageConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*remotetrigger.TriggerMessageRequest) (*remotetrigger.TriggerMessageConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*remotetrigger.TriggerMessageRequest) *remotetrigger.TriggerMessageConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*remotetrigger.TriggerMessageConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*remotetrigger.TriggerMessageRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteTriggerChargePointHandler_OnTriggerMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnTriggerMessage'
type MockRemoteTriggerChargePointHandler_OnTriggerMessage_Call struct {
	*mock.Call
}

// OnTriggerMessage is a helper method to define mock.On call
//   - request *remotetrigger.TriggerMessageRequest
func (_e *MockRemoteTriggerChargePointHandler_Expecter) OnTriggerMessage(request interface{}) *MockRemoteTriggerChargePointHandler_OnTriggerMessage_Call {
	return &MockRemoteTriggerChargePointHandler_OnTriggerMessage_Call{Call: _e.mock.On("OnTriggerMessage", request)}
}

func (_c *MockRemoteTriggerChargePointHandler_OnTriggerMessage_Call) Run(run func(request *remotetrigger.TriggerMessageRequest)) *MockRemoteTriggerChargePointHandler_OnTriggerMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*remotetrigger.TriggerMessageRequest))
	})
	return _c
}

func (_c *MockRemoteTriggerChargePointHandler_OnTriggerMessage_Call) Return(confirmation *remotetrigger.TriggerMessageConfirmation, err error) *MockRemoteTriggerChargePointHandler_OnTriggerMessage_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockRemoteTriggerChargePointHandler_OnTriggerMessage_Call) RunAndReturn(run func(*remotetrigger.TriggerMessageRequest) (*remotetrigger.TriggerMessageConfirmation, error)) *MockRemoteTriggerChargePointHandler_OnTriggerMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRemoteTriggerChargePointHandler creates a new instance of MockRemoteTriggerChargePointHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemoteTriggerChargePointHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemoteTriggerChargePointHandler {
	mock := &MockRemoteTriggerChargePointHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
