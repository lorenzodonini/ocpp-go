// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	security "github.com/lorenzodonini/ocpp-go/ocpp1.6/security"
	mock "github.com/stretchr/testify/mock"
)

// MockSecurityChargePointHandler is an autogenerated mock type for the ChargePointHandler type
type MockSecurityChargePointHandler struct {
	mock.Mock
}

type MockSecurityChargePointHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecurityChargePointHandler) EXPECT() *MockSecurityChargePointHandler_Expecter {
	return &MockSecurityChargePointHandler_Expecter{mock: &_m.Mock}
}

// OnCertificateSigned provides a mock function with given fields: request
func (_m *MockSecurityChargePointHandler) OnCertificateSigned(request *security.CertificateSignedRequest) (*security.CertificateSignedResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnCertificateSigned")
	}

	var r0 *security.CertificateSignedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*security.CertificateSignedRequest) (*security.CertificateSignedResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*security.CertificateSignedRequest) *security.CertificateSignedResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*security.CertificateSignedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*security.CertificateSignedRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecurityChargePointHandler_OnCertificateSigned_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnCertificateSigned'
type MockSecurityChargePointHandler_OnCertificateSigned_Call struct {
	*mock.Call
}

// OnCertificateSigned is a helper method to define mock.On call
//   - request *security.CertificateSignedRequest
func (_e *MockSecurityChargePointHandler_Expecter) OnCertificateSigned(request interface{}) *MockSecurityChargePointHandler_OnCertificateSigned_Call {
	return &MockSecurityChargePointHandler_OnCertificateSigned_Call{Call: _e.mock.On("OnCertificateSigned", request)}
}

func (_c *MockSecurityChargePointHandler_OnCertificateSigned_Call) Run(run func(request *security.CertificateSignedRequest)) *MockSecurityChargePointHandler_OnCertificateSigned_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*security.CertificateSignedRequest))
	})
	return _c
}

func (_c *MockSecurityChargePointHandler_OnCertificateSigned_Call) Return(response *security.CertificateSignedResponse, err error) *MockSecurityChargePointHandler_OnCertificateSigned_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockSecurityChargePointHandler_OnCertificateSigned_Call) RunAndReturn(run func(*security.CertificateSignedRequest) (*security.CertificateSignedResponse, error)) *MockSecurityChargePointHandler_OnCertificateSigned_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecurityChargePointHandler creates a new instance of MockSecurityChargePointHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecurityChargePointHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecurityChargePointHandler {
	mock := &MockSecurityChargePointHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
