// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	security "github.com/lorenzodonini/ocpp-go/ocpp1.6/security"
	mock "github.com/stretchr/testify/mock"
)

// MockSecurityCentralSystemHandler is an autogenerated mock type for the CentralSystemHandler type
type MockSecurityCentralSystemHandler struct {
	mock.Mock
}

type MockSecurityCentralSystemHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecurityCentralSystemHandler) EXPECT() *MockSecurityCentralSystemHandler_Expecter {
	return &MockSecurityCentralSystemHandler_Expecter{mock: &_m.Mock}
}

// OnSecurityEventNotification provides a mock function with given fields: chargingStationID, request
func (_m *MockSecurityCentralSystemHandler) OnSecurityEventNotification(chargingStationID string, request *security.SecurityEventNotificationRequest) (*security.SecurityEventNotificationResponse, error) {
	ret := _m.Called(chargingStationID, request)

	if len(ret) == 0 {
		panic("no return value specified for OnSecurityEventNotification")
	}

	var r0 *security.SecurityEventNotificationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *security.SecurityEventNotificationRequest) (*security.SecurityEventNotificationResponse, error)); ok {
		return rf(chargingStationID, request)
	}
	if rf, ok := ret.Get(0).(func(string, *security.SecurityEventNotificationRequest) *security.SecurityEventNotificationResponse); ok {
		r0 = rf(chargingStationID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*security.SecurityEventNotificationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *security.SecurityEventNotificationRequest) error); ok {
		r1 = rf(chargingStationID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecurityCentralSystemHandler_OnSecurityEventNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnSecurityEventNotification'
type MockSecurityCentralSystemHandler_OnSecurityEventNotification_Call struct {
	*mock.Call
}

// OnSecurityEventNotification is a helper method to define mock.On call
//   - chargingStationID string
//   - request *security.SecurityEventNotificationRequest
func (_e *MockSecurityCentralSystemHandler_Expecter) OnSecurityEventNotification(chargingStationID interface{}, request interface{}) *MockSecurityCentralSystemHandler_OnSecurityEventNotification_Call {
	return &MockSecurityCentralSystemHandler_OnSecurityEventNotification_Call{Call: _e.mock.On("OnSecurityEventNotification", chargingStationID, request)}
}

func (_c *MockSecurityCentralSystemHandler_OnSecurityEventNotification_Call) Run(run func(chargingStationID string, request *security.SecurityEventNotificationRequest)) *MockSecurityCentralSystemHandler_OnSecurityEventNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*security.SecurityEventNotificationRequest))
	})
	return _c
}

func (_c *MockSecurityCentralSystemHandler_OnSecurityEventNotification_Call) Return(response *security.SecurityEventNotificationResponse, err error) *MockSecurityCentralSystemHandler_OnSecurityEventNotification_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockSecurityCentralSystemHandler_OnSecurityEventNotification_Call) RunAndReturn(run func(string, *security.SecurityEventNotificationRequest) (*security.SecurityEventNotificationResponse, error)) *MockSecurityCentralSystemHandler_OnSecurityEventNotification_Call {
	_c.Call.Return(run)
	return _c
}

// OnSignCertificate provides a mock function with given fields: chargingStationID, request
func (_m *MockSecurityCentralSystemHandler) OnSignCertificate(chargingStationID string, request *security.SignCertificateRequest) (*security.SignCertificateResponse, error) {
	ret := _m.Called(chargingStationID, request)

	if len(ret) == 0 {
		panic("no return value specified for OnSignCertificate")
	}

	var r0 *security.SignCertificateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *security.SignCertificateRequest) (*security.SignCertificateResponse, error)); ok {
		return rf(chargingStationID, request)
	}
	if rf, ok := ret.Get(0).(func(string, *security.SignCertificateRequest) *security.SignCertificateResponse); ok {
		r0 = rf(chargingStationID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*security.SignCertificateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *security.SignCertificateRequest) error); ok {
		r1 = rf(chargingStationID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecurityCentralSystemHandler_OnSignCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnSignCertificate'
type MockSecurityCentralSystemHandler_OnSignCertificate_Call struct {
	*mock.Call
}

// OnSignCertificate is a helper method to define mock.On call
//   - chargingStationID string
//   - request *security.SignCertificateRequest
func (_e *MockSecurityCentralSystemHandler_Expecter) OnSignCertificate(chargingStationID interface{}, request interface{}) *MockSecurityCentralSystemHandler_OnSignCertificate_Call {
	return &MockSecurityCentralSystemHandler_OnSignCertificate_Call{Call: _e.mock.On("OnSignCertificate", chargingStationID, request)}
}

func (_c *MockSecurityCentralSystemHandler_OnSignCertificate_Call) Run(run func(chargingStationID string, request *security.SignCertificateRequest)) *MockSecurityCentralSystemHandler_OnSignCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*security.SignCertificateRequest))
	})
	return _c
}

func (_c *MockSecurityCentralSystemHandler_OnSignCertificate_Call) Return(response *security.SignCertificateResponse, err error) *MockSecurityCentralSystemHandler_OnSignCertificate_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockSecurityCentralSystemHandler_OnSignCertificate_Call) RunAndReturn(run func(string, *security.SignCertificateRequest) (*security.SignCertificateResponse, error)) *MockSecurityCentralSystemHandler_OnSignCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecurityCentralSystemHandler creates a new instance of MockSecurityCentralSystemHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecurityCentralSystemHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecurityCentralSystemHandler {
	mock := &MockSecurityCentralSystemHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
