// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	smartcharging "github.com/lorenzodonini/ocpp-go/ocpp1.6/smartcharging"
	mock "github.com/stretchr/testify/mock"
)

// MockSmartChargingChargePointHandler is an autogenerated mock type for the ChargePointHandler type
type MockSmartChargingChargePointHandler struct {
	mock.Mock
}

type MockSmartChargingChargePointHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSmartChargingChargePointHandler) EXPECT() *MockSmartChargingChargePointHandler_Expecter {
	return &MockSmartChargingChargePointHandler_Expecter{mock: &_m.Mock}
}

// OnClearChargingProfile provides a mock function with given fields: request
func (_m *MockSmartChargingChargePointHandler) OnClearChargingProfile(request *smartcharging.ClearChargingProfileRequest) (*smartcharging.ClearChargingProfileConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnClearChargingProfile")
	}

	var r0 *smartcharging.ClearChargingProfileConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*smartcharging.ClearChargingProfileRequest) (*smartcharging.ClearChargingProfileConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*smartcharging.ClearChargingProfileRequest) *smartcharging.ClearChargingProfileConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*smartcharging.ClearChargingProfileConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*smartcharging.ClearChargingProfileRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSmartChargingChargePointHandler_OnClearChargingProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnClearChargingProfile'
type MockSmartChargingChargePointHandler_OnClearChargingProfile_Call struct {
	*mock.Call
}

// OnClearChargingProfile is a helper method to define mock.On call
//   - request *smartcharging.ClearChargingProfileRequest
func (_e *MockSmartChargingChargePointHandler_Expecter) OnClearChargingProfile(request interface{}) *MockSmartChargingChargePointHandler_OnClearChargingProfile_Call {
	return &MockSmartChargingChargePointHandler_OnClearChargingProfile_Call{Call: _e.mock.On("OnClearChargingProfile", request)}
}

func (_c *MockSmartChargingChargePointHandler_OnClearChargingProfile_Call) Run(run func(request *smartcharging.ClearChargingProfileRequest)) *MockSmartChargingChargePointHandler_OnClearChargingProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*smartcharging.ClearChargingProfileRequest))
	})
	return _c
}

func (_c *MockSmartChargingChargePointHandler_OnClearChargingProfile_Call) Return(confirmation *smartcharging.ClearChargingProfileConfirmation, err error) *MockSmartChargingChargePointHandler_OnClearChargingProfile_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockSmartChargingChargePointHandler_OnClearChargingProfile_Call) RunAndReturn(run func(*smartcharging.ClearChargingProfileRequest) (*smartcharging.ClearChargingProfileConfirmation, error)) *MockSmartChargingChargePointHandler_OnClearChargingProfile_Call {
	_c.Call.Return(run)
	return _c
}

// OnGetCompositeSchedule provides a mock function with given fields: request
func (_m *MockSmartChargingChargePointHandler) OnGetCompositeSchedule(request *smartcharging.GetCompositeScheduleRequest) (*smartcharging.GetCompositeScheduleConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnGetCompositeSchedule")
	}

	var r0 *smartcharging.GetCompositeScheduleConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*smartcharging.GetCompositeScheduleRequest) (*smartcharging.GetCompositeScheduleConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*smartcharging.GetCompositeScheduleRequest) *smartcharging.GetCompositeScheduleConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*smartcharging.GetCompositeScheduleConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*smartcharging.GetCompositeScheduleRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSmartChargingChargePointHandler_OnGetCompositeSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnGetCompositeSchedule'
type MockSmartChargingChargePointHandler_OnGetCompositeSchedule_Call struct {
	*mock.Call
}

// OnGetCompositeSchedule is a helper method to define mock.On call
//   - request *smartcharging.GetCompositeScheduleRequest
func (_e *MockSmartChargingChargePointHandler_Expecter) OnGetCompositeSchedule(request interface{}) *MockSmartChargingChargePointHandler_OnGetCompositeSchedule_Call {
	return &MockSmartChargingChargePointHandler_OnGetCompositeSchedule_Call{Call: _e.mock.On("OnGetCompositeSchedule", request)}
}

func (_c *MockSmartChargingChargePointHandler_OnGetCompositeSchedule_Call) Run(run func(request *smartcharging.GetCompositeScheduleRequest)) *MockSmartChargingChargePointHandler_OnGetCompositeSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*smartcharging.GetCompositeScheduleRequest))
	})
	return _c
}

func (_c *MockSmartChargingChargePointHandler_OnGetCompositeSchedule_Call) Return(confirmation *smartcharging.GetCompositeScheduleConfirmation, err error) *MockSmartChargingChargePointHandler_OnGetCompositeSchedule_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockSmartChargingChargePointHandler_OnGetCompositeSchedule_Call) RunAndReturn(run func(*smartcharging.GetCompositeScheduleRequest) (*smartcharging.GetCompositeScheduleConfirmation, error)) *MockSmartChargingChargePointHandler_OnGetCompositeSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// OnSetChargingProfile provides a mock function with given fields: request
func (_m *MockSmartChargingChargePointHandler) OnSetChargingProfile(request *smartcharging.SetChargingProfileRequest) (*smartcharging.SetChargingProfileConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnSetChargingProfile")
	}

	var r0 *smartcharging.SetChargingProfileConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*smartcharging.SetChargingProfileRequest) (*smartcharging.SetChargingProfileConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*smartcharging.SetChargingProfileRequest) *smartcharging.SetChargingProfileConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*smartcharging.SetChargingProfileConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*smartcharging.SetChargingProfileRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSmartChargingChargePointHandler_OnSetChargingProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnSetChargingProfile'
type MockSmartChargingChargePointHandler_OnSetChargingProfile_Call struct {
	*mock.Call
}

// OnSetChargingProfile is a helper method to define mock.On call
//   - request *smartcharging.SetChargingProfileRequest
func (_e *MockSmartChargingChargePointHandler_Expecter) OnSetChargingProfile(request interface{}) *MockSmartChargingChargePointHandler_OnSetChargingProfile_Call {
	return &MockSmartChargingChargePointHandler_OnSetChargingProfile_Call{Call: _e.mock.On("OnSetChargingProfile", request)}
}

func (_c *MockSmartChargingChargePointHandler_OnSetChargingProfile_Call) Run(run func(request *smartcharging.SetChargingProfileRequest)) *MockSmartChargingChargePointHandler_OnSetChargingProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*smartcharging.SetChargingProfileRequest))
	})
	return _c
}

func (_c *MockSmartChargingChargePointHandler_OnSetChargingProfile_Call) Return(confirmation *smartcharging.SetChargingProfileConfirmation, err error) *MockSmartChargingChargePointHandler_OnSetChargingProfile_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockSmartChargingChargePointHandler_OnSetChargingProfile_Call) RunAndReturn(run func(*smartcharging.SetChargingProfileRequest) (*smartcharging.SetChargingProfileConfirmation, error)) *MockSmartChargingChargePointHandler_OnSetChargingProfile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSmartChargingChargePointHandler creates a new instance of MockSmartChargingChargePointHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSmartChargingChargePointHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSmartChargingChargePointHandler {
	mock := &MockSmartChargingChargePointHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
