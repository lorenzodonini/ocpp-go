// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	securefirmware "github.com/lorenzodonini/ocpp-go/ocpp1.6/securefirmware"
	mock "github.com/stretchr/testify/mock"
)

// MockSecureFirmwareCentralSystemHandler is an autogenerated mock type for the CentralSystemHandler type
type MockSecureFirmwareCentralSystemHandler struct {
	mock.Mock
}

type MockSecureFirmwareCentralSystemHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecureFirmwareCentralSystemHandler) EXPECT() *MockSecureFirmwareCentralSystemHandler_Expecter {
	return &MockSecureFirmwareCentralSystemHandler_Expecter{mock: &_m.Mock}
}

// OnSignedFirmwareStatusNotification provides a mock function with given fields: chargingStationID, request
func (_m *MockSecureFirmwareCentralSystemHandler) OnSignedFirmwareStatusNotification(chargingStationID string, request *securefirmware.SignedFirmwareStatusNotificationRequest) (*securefirmware.SignedFirmwareStatusNotificationResponse, error) {
	ret := _m.Called(chargingStationID, request)

	if len(ret) == 0 {
		panic("no return value specified for OnSignedFirmwareStatusNotification")
	}

	var r0 *securefirmware.SignedFirmwareStatusNotificationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *securefirmware.SignedFirmwareStatusNotificationRequest) (*securefirmware.SignedFirmwareStatusNotificationResponse, error)); ok {
		return rf(chargingStationID, request)
	}
	if rf, ok := ret.Get(0).(func(string, *securefirmware.SignedFirmwareStatusNotificationRequest) *securefirmware.SignedFirmwareStatusNotificationResponse); ok {
		r0 = rf(chargingStationID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securefirmware.SignedFirmwareStatusNotificationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *securefirmware.SignedFirmwareStatusNotificationRequest) error); ok {
		r1 = rf(chargingStationID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecureFirmwareCentralSystemHandler_OnSignedFirmwareStatusNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnSignedFirmwareStatusNotification'
type MockSecureFirmwareCentralSystemHandler_OnSignedFirmwareStatusNotification_Call struct {
	*mock.Call
}

// OnSignedFirmwareStatusNotification is a helper method to define mock.On call
//   - chargingStationID string
//   - request *securefirmware.SignedFirmwareStatusNotificationRequest
func (_e *MockSecureFirmwareCentralSystemHandler_Expecter) OnSignedFirmwareStatusNotification(chargingStationID interface{}, request interface{}) *MockSecureFirmwareCentralSystemHandler_OnSignedFirmwareStatusNotification_Call {
	return &MockSecureFirmwareCentralSystemHandler_OnSignedFirmwareStatusNotification_Call{Call: _e.mock.On("OnSignedFirmwareStatusNotification", chargingStationID, request)}
}

func (_c *MockSecureFirmwareCentralSystemHandler_OnSignedFirmwareStatusNotification_Call) Run(run func(chargingStationID string, request *securefirmware.SignedFirmwareStatusNotificationRequest)) *MockSecureFirmwareCentralSystemHandler_OnSignedFirmwareStatusNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*securefirmware.SignedFirmwareStatusNotificationRequest))
	})
	return _c
}

func (_c *MockSecureFirmwareCentralSystemHandler_OnSignedFirmwareStatusNotification_Call) Return(response *securefirmware.SignedFirmwareStatusNotificationResponse, err error) *MockSecureFirmwareCentralSystemHandler_OnSignedFirmwareStatusNotification_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockSecureFirmwareCentralSystemHandler_OnSignedFirmwareStatusNotification_Call) RunAndReturn(run func(string, *securefirmware.SignedFirmwareStatusNotificationRequest) (*securefirmware.SignedFirmwareStatusNotificationResponse, error)) *MockSecureFirmwareCentralSystemHandler_OnSignedFirmwareStatusNotification_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecureFirmwareCentralSystemHandler creates a new instance of MockSecureFirmwareCentralSystemHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecureFirmwareCentralSystemHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecureFirmwareCentralSystemHandler {
	mock := &MockSecureFirmwareCentralSystemHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
