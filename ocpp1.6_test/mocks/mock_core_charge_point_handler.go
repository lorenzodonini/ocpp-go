// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	core "github.com/lorenzodonini/ocpp-go/ocpp1.6/core"
	mock "github.com/stretchr/testify/mock"
)

// MockCoreChargePointHandler is an autogenerated mock type for the ChargePointHandler type
type MockCoreChargePointHandler struct {
	mock.Mock
}

type MockCoreChargePointHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCoreChargePointHandler) EXPECT() *MockCoreChargePointHandler_Expecter {
	return &MockCoreChargePointHandler_Expecter{mock: &_m.Mock}
}

// OnChangeAvailability provides a mock function with given fields: request
func (_m *MockCoreChargePointHandler) OnChangeAvailability(request *core.ChangeAvailabilityRequest) (*core.ChangeAvailabilityConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnChangeAvailability")
	}

	var r0 *core.ChangeAvailabilityConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.ChangeAvailabilityRequest) (*core.ChangeAvailabilityConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*core.ChangeAvailabilityRequest) *core.ChangeAvailabilityConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ChangeAvailabilityConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.ChangeAvailabilityRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCoreChargePointHandler_OnChangeAvailability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnChangeAvailability'
type MockCoreChargePointHandler_OnChangeAvailability_Call struct {
	*mock.Call
}

// OnChangeAvailability is a helper method to define mock.On call
//   - request *core.ChangeAvailabilityRequest
func (_e *MockCoreChargePointHandler_Expecter) OnChangeAvailability(request interface{}) *MockCoreChargePointHandler_OnChangeAvailability_Call {
	return &MockCoreChargePointHandler_OnChangeAvailability_Call{Call: _e.mock.On("OnChangeAvailability", request)}
}

func (_c *MockCoreChargePointHandler_OnChangeAvailability_Call) Run(run func(request *core.ChangeAvailabilityRequest)) *MockCoreChargePointHandler_OnChangeAvailability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.ChangeAvailabilityRequest))
	})
	return _c
}

func (_c *MockCoreChargePointHandler_OnChangeAvailability_Call) Return(confirmation *core.ChangeAvailabilityConfirmation, err error) *MockCoreChargePointHandler_OnChangeAvailability_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockCoreChargePointHandler_OnChangeAvailability_Call) RunAndReturn(run func(*core.ChangeAvailabilityRequest) (*core.ChangeAvailabilityConfirmation, error)) *MockCoreChargePointHandler_OnChangeAvailability_Call {
	_c.Call.Return(run)
	return _c
}

// OnChangeConfiguration provides a mock function with given fields: request
func (_m *MockCoreChargePointHandler) OnChangeConfiguration(request *core.ChangeConfigurationRequest) (*core.ChangeConfigurationConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnChangeConfiguration")
	}

	var r0 *core.ChangeConfigurationConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.ChangeConfigurationRequest) (*core.ChangeConfigurationConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*core.ChangeConfigurationRequest) *core.ChangeConfigurationConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ChangeConfigurationConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.ChangeConfigurationRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCoreChargePointHandler_OnChangeConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnChangeConfiguration'
type MockCoreChargePointHandler_OnChangeConfiguration_Call struct {
	*mock.Call
}

// OnChangeConfiguration is a helper method to define mock.On call
//   - request *core.ChangeConfigurationRequest
func (_e *MockCoreChargePointHandler_Expecter) OnChangeConfiguration(request interface{}) *MockCoreChargePointHandler_OnChangeConfiguration_Call {
	return &MockCoreChargePointHandler_OnChangeConfiguration_Call{Call: _e.mock.On("OnChangeConfiguration", request)}
}

func (_c *MockCoreChargePointHandler_OnChangeConfiguration_Call) Run(run func(request *core.ChangeConfigurationRequest)) *MockCoreChargePointHandler_OnChangeConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.ChangeConfigurationRequest))
	})
	return _c
}

func (_c *MockCoreChargePointHandler_OnChangeConfiguration_Call) Return(confirmation *core.ChangeConfigurationConfirmation, err error) *MockCoreChargePointHandler_OnChangeConfiguration_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockCoreChargePointHandler_OnChangeConfiguration_Call) RunAndReturn(run func(*core.ChangeConfigurationRequest) (*core.ChangeConfigurationConfirmation, error)) *MockCoreChargePointHandler_OnChangeConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// OnClearCache provides a mock function with given fields: request
func (_m *MockCoreChargePointHandler) OnClearCache(request *core.ClearCacheRequest) (*core.ClearCacheConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnClearCache")
	}

	var r0 *core.ClearCacheConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.ClearCacheRequest) (*core.ClearCacheConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*core.ClearCacheRequest) *core.ClearCacheConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ClearCacheConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.ClearCacheRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCoreChargePointHandler_OnClearCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnClearCache'
type MockCoreChargePointHandler_OnClearCache_Call struct {
	*mock.Call
}

// OnClearCache is a helper method to define mock.On call
//   - request *core.ClearCacheRequest
func (_e *MockCoreChargePointHandler_Expecter) OnClearCache(request interface{}) *MockCoreChargePointHandler_OnClearCache_Call {
	return &MockCoreChargePointHandler_OnClearCache_Call{Call: _e.mock.On("OnClearCache", request)}
}

func (_c *MockCoreChargePointHandler_OnClearCache_Call) Run(run func(request *core.ClearCacheRequest)) *MockCoreChargePointHandler_OnClearCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.ClearCacheRequest))
	})
	return _c
}

func (_c *MockCoreChargePointHandler_OnClearCache_Call) Return(confirmation *core.ClearCacheConfirmation, err error) *MockCoreChargePointHandler_OnClearCache_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockCoreChargePointHandler_OnClearCache_Call) RunAndReturn(run func(*core.ClearCacheRequest) (*core.ClearCacheConfirmation, error)) *MockCoreChargePointHandler_OnClearCache_Call {
	_c.Call.Return(run)
	return _c
}

// OnDataTransfer provides a mock function with given fields: request
func (_m *MockCoreChargePointHandler) OnDataTransfer(request *core.DataTransferRequest) (*core.DataTransferConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnDataTransfer")
	}

	var r0 *core.DataTransferConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.DataTransferRequest) (*core.DataTransferConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*core.DataTransferRequest) *core.DataTransferConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.DataTransferConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.DataTransferRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCoreChargePointHandler_OnDataTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDataTransfer'
type MockCoreChargePointHandler_OnDataTransfer_Call struct {
	*mock.Call
}

// OnDataTransfer is a helper method to define mock.On call
//   - request *core.DataTransferRequest
func (_e *MockCoreChargePointHandler_Expecter) OnDataTransfer(request interface{}) *MockCoreChargePointHandler_OnDataTransfer_Call {
	return &MockCoreChargePointHandler_OnDataTransfer_Call{Call: _e.mock.On("OnDataTransfer", request)}
}

func (_c *MockCoreChargePointHandler_OnDataTransfer_Call) Run(run func(request *core.DataTransferRequest)) *MockCoreChargePointHandler_OnDataTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.DataTransferRequest))
	})
	return _c
}

func (_c *MockCoreChargePointHandler_OnDataTransfer_Call) Return(confirmation *core.DataTransferConfirmation, err error) *MockCoreChargePointHandler_OnDataTransfer_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockCoreChargePointHandler_OnDataTransfer_Call) RunAndReturn(run func(*core.DataTransferRequest) (*core.DataTransferConfirmation, error)) *MockCoreChargePointHandler_OnDataTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// OnGetConfiguration provides a mock function with given fields: request
func (_m *MockCoreChargePointHandler) OnGetConfiguration(request *core.GetConfigurationRequest) (*core.GetConfigurationConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnGetConfiguration")
	}

	var r0 *core.GetConfigurationConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.GetConfigurationRequest) (*core.GetConfigurationConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*core.GetConfigurationRequest) *core.GetConfigurationConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.GetConfigurationConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.GetConfigurationRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCoreChargePointHandler_OnGetConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnGetConfiguration'
type MockCoreChargePointHandler_OnGetConfiguration_Call struct {
	*mock.Call
}

// OnGetConfiguration is a helper method to define mock.On call
//   - request *core.GetConfigurationRequest
func (_e *MockCoreChargePointHandler_Expecter) OnGetConfiguration(request interface{}) *MockCoreChargePointHandler_OnGetConfiguration_Call {
	return &MockCoreChargePointHandler_OnGetConfiguration_Call{Call: _e.mock.On("OnGetConfiguration", request)}
}

func (_c *MockCoreChargePointHandler_OnGetConfiguration_Call) Run(run func(request *core.GetConfigurationRequest)) *MockCoreChargePointHandler_OnGetConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.GetConfigurationRequest))
	})
	return _c
}

func (_c *MockCoreChargePointHandler_OnGetConfiguration_Call) Return(confirmation *core.GetConfigurationConfirmation, err error) *MockCoreChargePointHandler_OnGetConfiguration_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockCoreChargePointHandler_OnGetConfiguration_Call) RunAndReturn(run func(*core.GetConfigurationRequest) (*core.GetConfigurationConfirmation, error)) *MockCoreChargePointHandler_OnGetConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// OnRemoteStartTransaction provides a mock function with given fields: request
func (_m *MockCoreChargePointHandler) OnRemoteStartTransaction(request *core.RemoteStartTransactionRequest) (*core.RemoteStartTransactionConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnRemoteStartTransaction")
	}

	var r0 *core.RemoteStartTransactionConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.RemoteStartTransactionRequest) (*core.RemoteStartTransactionConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*core.RemoteStartTransactionRequest) *core.RemoteStartTransactionConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.RemoteStartTransactionConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.RemoteStartTransactionRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCoreChargePointHandler_OnRemoteStartTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnRemoteStartTransaction'
type MockCoreChargePointHandler_OnRemoteStartTransaction_Call struct {
	*mock.Call
}

// OnRemoteStartTransaction is a helper method to define mock.On call
//   - request *core.RemoteStartTransactionRequest
func (_e *MockCoreChargePointHandler_Expecter) OnRemoteStartTransaction(request interface{}) *MockCoreChargePointHandler_OnRemoteStartTransaction_Call {
	return &MockCoreChargePointHandler_OnRemoteStartTransaction_Call{Call: _e.mock.On("OnRemoteStartTransaction", request)}
}

func (_c *MockCoreChargePointHandler_OnRemoteStartTransaction_Call) Run(run func(request *core.RemoteStartTransactionRequest)) *MockCoreChargePointHandler_OnRemoteStartTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.RemoteStartTransactionRequest))
	})
	return _c
}

func (_c *MockCoreChargePointHandler_OnRemoteStartTransaction_Call) Return(confirmation *core.RemoteStartTransactionConfirmation, err error) *MockCoreChargePointHandler_OnRemoteStartTransaction_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockCoreChargePointHandler_OnRemoteStartTransaction_Call) RunAndReturn(run func(*core.RemoteStartTransactionRequest) (*core.RemoteStartTransactionConfirmation, error)) *MockCoreChargePointHandler_OnRemoteStartTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// OnRemoteStopTransaction provides a mock function with given fields: request
func (_m *MockCoreChargePointHandler) OnRemoteStopTransaction(request *core.RemoteStopTransactionRequest) (*core.RemoteStopTransactionConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnRemoteStopTransaction")
	}

	var r0 *core.RemoteStopTransactionConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.RemoteStopTransactionRequest) (*core.RemoteStopTransactionConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*core.RemoteStopTransactionRequest) *core.RemoteStopTransactionConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.RemoteStopTransactionConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.RemoteStopTransactionRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCoreChargePointHandler_OnRemoteStopTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnRemoteStopTransaction'
type MockCoreChargePointHandler_OnRemoteStopTransaction_Call struct {
	*mock.Call
}

// OnRemoteStopTransaction is a helper method to define mock.On call
//   - request *core.RemoteStopTransactionRequest
func (_e *MockCoreChargePointHandler_Expecter) OnRemoteStopTransaction(request interface{}) *MockCoreChargePointHandler_OnRemoteStopTransaction_Call {
	return &MockCoreChargePointHandler_OnRemoteStopTransaction_Call{Call: _e.mock.On("OnRemoteStopTransaction", request)}
}

func (_c *MockCoreChargePointHandler_OnRemoteStopTransaction_Call) Run(run func(request *core.RemoteStopTransactionRequest)) *MockCoreChargePointHandler_OnRemoteStopTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.RemoteStopTransactionRequest))
	})
	return _c
}

func (_c *MockCoreChargePointHandler_OnRemoteStopTransaction_Call) Return(confirmation *core.RemoteStopTransactionConfirmation, err error) *MockCoreChargePointHandler_OnRemoteStopTransaction_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockCoreChargePointHandler_OnRemoteStopTransaction_Call) RunAndReturn(run func(*core.RemoteStopTransactionRequest) (*core.RemoteStopTransactionConfirmation, error)) *MockCoreChargePointHandler_OnRemoteStopTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// OnReset provides a mock function with given fields: request
func (_m *MockCoreChargePointHandler) OnReset(request *core.ResetRequest) (*core.ResetConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnReset")
	}

	var r0 *core.ResetConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.ResetRequest) (*core.ResetConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*core.ResetRequest) *core.ResetConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ResetConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.ResetRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCoreChargePointHandler_OnReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnReset'
type MockCoreChargePointHandler_OnReset_Call struct {
	*mock.Call
}

// OnReset is a helper method to define mock.On call
//   - request *core.ResetRequest
func (_e *MockCoreChargePointHandler_Expecter) OnReset(request interface{}) *MockCoreChargePointHandler_OnReset_Call {
	return &MockCoreChargePointHandler_OnReset_Call{Call: _e.mock.On("OnReset", request)}
}

func (_c *MockCoreChargePointHandler_OnReset_Call) Run(run func(request *core.ResetRequest)) *MockCoreChargePointHandler_OnReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.ResetRequest))
	})
	return _c
}

func (_c *MockCoreChargePointHandler_OnReset_Call) Return(confirmation *core.ResetConfirmation, err error) *MockCoreChargePointHandler_OnReset_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockCoreChargePointHandler_OnReset_Call) RunAndReturn(run func(*core.ResetRequest) (*core.ResetConfirmation, error)) *MockCoreChargePointHandler_OnReset_Call {
	_c.Call.Return(run)
	return _c
}

// OnUnlockConnector provides a mock function with given fields: request
func (_m *MockCoreChargePointHandler) OnUnlockConnector(request *core.UnlockConnectorRequest) (*core.UnlockConnectorConfirmation, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for OnUnlockConnector")
	}

	var r0 *core.UnlockConnectorConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.UnlockConnectorRequest) (*core.UnlockConnectorConfirmation, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*core.UnlockConnectorRequest) *core.UnlockConnectorConfirmation); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.UnlockConnectorConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.UnlockConnectorRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCoreChargePointHandler_OnUnlockConnector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnUnlockConnector'
type MockCoreChargePointHandler_OnUnlockConnector_Call struct {
	*mock.Call
}

// OnUnlockConnector is a helper method to define mock.On call
//   - request *core.UnlockConnectorRequest
func (_e *MockCoreChargePointHandler_Expecter) OnUnlockConnector(request interface{}) *MockCoreChargePointHandler_OnUnlockConnector_Call {
	return &MockCoreChargePointHandler_OnUnlockConnector_Call{Call: _e.mock.On("OnUnlockConnector", request)}
}

func (_c *MockCoreChargePointHandler_OnUnlockConnector_Call) Run(run func(request *core.UnlockConnectorRequest)) *MockCoreChargePointHandler_OnUnlockConnector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.UnlockConnectorRequest))
	})
	return _c
}

func (_c *MockCoreChargePointHandler_OnUnlockConnector_Call) Return(confirmation *core.UnlockConnectorConfirmation, err error) *MockCoreChargePointHandler_OnUnlockConnector_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockCoreChargePointHandler_OnUnlockConnector_Call) RunAndReturn(run func(*core.UnlockConnectorRequest) (*core.UnlockConnectorConfirmation, error)) *MockCoreChargePointHandler_OnUnlockConnector_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCoreChargePointHandler creates a new instance of MockCoreChargePointHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCoreChargePointHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCoreChargePointHandler {
	mock := &MockCoreChargePointHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
