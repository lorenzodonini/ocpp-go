// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	firmware "github.com/lorenzodonini/ocpp-go/ocpp1.6/firmware"
	mock "github.com/stretchr/testify/mock"
)

// MockFirmwareCentralSystemHandler is an autogenerated mock type for the CentralSystemHandler type
type MockFirmwareCentralSystemHandler struct {
	mock.Mock
}

type MockFirmwareCentralSystemHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFirmwareCentralSystemHandler) EXPECT() *MockFirmwareCentralSystemHandler_Expecter {
	return &MockFirmwareCentralSystemHandler_Expecter{mock: &_m.Mock}
}

// OnDiagnosticsStatusNotification provides a mock function with given fields: chargePointId, request
func (_m *MockFirmwareCentralSystemHandler) OnDiagnosticsStatusNotification(chargePointId string, request *firmware.DiagnosticsStatusNotificationRequest) (*firmware.DiagnosticsStatusNotificationConfirmation, error) {
	ret := _m.Called(chargePointId, request)

	if len(ret) == 0 {
		panic("no return value specified for OnDiagnosticsStatusNotification")
	}

	var r0 *firmware.DiagnosticsStatusNotificationConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *firmware.DiagnosticsStatusNotificationRequest) (*firmware.DiagnosticsStatusNotificationConfirmation, error)); ok {
		return rf(chargePointId, request)
	}
	if rf, ok := ret.Get(0).(func(string, *firmware.DiagnosticsStatusNotificationRequest) *firmware.DiagnosticsStatusNotificationConfirmation); ok {
		r0 = rf(chargePointId, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firmware.DiagnosticsStatusNotificationConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *firmware.DiagnosticsStatusNotificationRequest) error); ok {
		r1 = rf(chargePointId, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFirmwareCentralSystemHandler_OnDiagnosticsStatusNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDiagnosticsStatusNotification'
type MockFirmwareCentralSystemHandler_OnDiagnosticsStatusNotification_Call struct {
	*mock.Call
}

// OnDiagnosticsStatusNotification is a helper method to define mock.On call
//   - chargePointId string
//   - request *firmware.DiagnosticsStatusNotificationRequest
func (_e *MockFirmwareCentralSystemHandler_Expecter) OnDiagnosticsStatusNotification(chargePointId interface{}, request interface{}) *MockFirmwareCentralSystemHandler_OnDiagnosticsStatusNotification_Call {
	return &MockFirmwareCentralSystemHandler_OnDiagnosticsStatusNotification_Call{Call: _e.mock.On("OnDiagnosticsStatusNotification", chargePointId, request)}
}

func (_c *MockFirmwareCentralSystemHandler_OnDiagnosticsStatusNotification_Call) Run(run func(chargePointId string, request *firmware.DiagnosticsStatusNotificationRequest)) *MockFirmwareCentralSystemHandler_OnDiagnosticsStatusNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*firmware.DiagnosticsStatusNotificationRequest))
	})
	return _c
}

func (_c *MockFirmwareCentralSystemHandler_OnDiagnosticsStatusNotification_Call) Return(confirmation *firmware.DiagnosticsStatusNotificationConfirmation, err error) *MockFirmwareCentralSystemHandler_OnDiagnosticsStatusNotification_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockFirmwareCentralSystemHandler_OnDiagnosticsStatusNotification_Call) RunAndReturn(run func(string, *firmware.DiagnosticsStatusNotificationRequest) (*firmware.DiagnosticsStatusNotificationConfirmation, error)) *MockFirmwareCentralSystemHandler_OnDiagnosticsStatusNotification_Call {
	_c.Call.Return(run)
	return _c
}

// OnFirmwareStatusNotification provides a mock function with given fields: chargePointId, request
func (_m *MockFirmwareCentralSystemHandler) OnFirmwareStatusNotification(chargePointId string, request *firmware.FirmwareStatusNotificationRequest) (*firmware.FirmwareStatusNotificationConfirmation, error) {
	ret := _m.Called(chargePointId, request)

	if len(ret) == 0 {
		panic("no return value specified for OnFirmwareStatusNotification")
	}

	var r0 *firmware.FirmwareStatusNotificationConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *firmware.FirmwareStatusNotificationRequest) (*firmware.FirmwareStatusNotificationConfirmation, error)); ok {
		return rf(chargePointId, request)
	}
	if rf, ok := ret.Get(0).(func(string, *firmware.FirmwareStatusNotificationRequest) *firmware.FirmwareStatusNotificationConfirmation); ok {
		r0 = rf(chargePointId, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firmware.FirmwareStatusNotificationConfirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *firmware.FirmwareStatusNotificationRequest) error); ok {
		r1 = rf(chargePointId, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFirmwareCentralSystemHandler_OnFirmwareStatusNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnFirmwareStatusNotification'
type MockFirmwareCentralSystemHandler_OnFirmwareStatusNotification_Call struct {
	*mock.Call
}

// OnFirmwareStatusNotification is a helper method to define mock.On call
//   - chargePointId string
//   - request *firmware.FirmwareStatusNotificationRequest
func (_e *MockFirmwareCentralSystemHandler_Expecter) OnFirmwareStatusNotification(chargePointId interface{}, request interface{}) *MockFirmwareCentralSystemHandler_OnFirmwareStatusNotification_Call {
	return &MockFirmwareCentralSystemHandler_OnFirmwareStatusNotification_Call{Call: _e.mock.On("OnFirmwareStatusNotification", chargePointId, request)}
}

func (_c *MockFirmwareCentralSystemHandler_OnFirmwareStatusNotification_Call) Run(run func(chargePointId string, request *firmware.FirmwareStatusNotificationRequest)) *MockFirmwareCentralSystemHandler_OnFirmwareStatusNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*firmware.FirmwareStatusNotificationRequest))
	})
	return _c
}

func (_c *MockFirmwareCentralSystemHandler_OnFirmwareStatusNotification_Call) Return(confirmation *firmware.FirmwareStatusNotificationConfirmation, err error) *MockFirmwareCentralSystemHandler_OnFirmwareStatusNotification_Call {
	_c.Call.Return(confirmation, err)
	return _c
}

func (_c *MockFirmwareCentralSystemHandler_OnFirmwareStatusNotification_Call) RunAndReturn(run func(string, *firmware.FirmwareStatusNotificationRequest) (*firmware.FirmwareStatusNotificationConfirmation, error)) *MockFirmwareCentralSystemHandler_OnFirmwareStatusNotification_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFirmwareCentralSystemHandler creates a new instance of MockFirmwareCentralSystemHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFirmwareCentralSystemHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFirmwareCentralSystemHandler {
	mock := &MockFirmwareCentralSystemHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
